"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllGroups = getAllGroups;
exports.getGroup = getGroup;
exports.getGroupMemberCount = getGroupMemberCount;
exports.getGroupTeams = getGroupTeams;
exports.getGroupChannels = getGroupChannels;
exports.getGroupMembers = getGroupMembers;
exports.getGroupsAssociatedToChannel = exports.getGroupsNotAssociatedToChannel = exports.getGroupsAssociatedToTeam = exports.getGroupsNotAssociatedToTeam = void 0;

var _reselect = require("reselect");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
const emptyList = [];
const emptySyncables = {
  teams: [],
  channels: []
};

function getAllGroups(state) {
  return state.entities.groups.groups;
}

function getGroup(state, id) {
  return getAllGroups(state)[id];
}

function getGroupMemberCount(state, id) {
  const memberData = state.entities.groups.members;
  const groupMemberData = memberData[id];

  if (!groupMemberData) {
    return 0;
  }

  return memberData[id].totalMemberCount;
}

function getGroupSyncables(state, id) {
  return state.entities.groups.syncables[id] || emptySyncables;
}

function getGroupTeams(state, id) {
  return getGroupSyncables(state, id).teams;
}

function getGroupChannels(state, id) {
  return getGroupSyncables(state, id).channels;
}

function getGroupMembers(state, id) {
  const groupMemberData = state.entities.groups.members[id];

  if (!groupMemberData) {
    return emptyList;
  }

  return groupMemberData.members;
}

const teamGroupIDs = (state, teamID) => {
  var _state$entities$teams;

  return ((_state$entities$teams = state.entities.teams.groupsAssociatedToTeam[teamID]) === null || _state$entities$teams === void 0 ? void 0 : _state$entities$teams.ids) || [];
};

const channelGroupIDs = (state, channelID) => {
  var _state$entities$chann;

  return ((_state$entities$chann = state.entities.channels.groupsAssociatedToChannel[channelID]) === null || _state$entities$chann === void 0 ? void 0 : _state$entities$chann.ids) || [];
};

const getTeamGroupIDSet = (0, _reselect.createSelector)(teamGroupIDs, teamIDs => new Set(teamIDs));
const getChannelGroupIDSet = (0, _reselect.createSelector)(channelGroupIDs, channelIDs => new Set(channelIDs));
const getGroupsNotAssociatedToTeam = (0, _reselect.createSelector)(getAllGroups, (state, teamID) => getTeamGroupIDSet(state, teamID), (allGroups, teamGroupIDSet) => {
  return Object.entries(allGroups).filter(([groupID]) => !teamGroupIDSet.has(groupID)).map(entry => entry[1]);
});
exports.getGroupsNotAssociatedToTeam = getGroupsNotAssociatedToTeam;
const getGroupsAssociatedToTeam = (0, _reselect.createSelector)(getAllGroups, (state, teamID) => getTeamGroupIDSet(state, teamID), (allGroups, teamGroupIDSet) => {
  return Object.entries(allGroups).filter(([groupID]) => teamGroupIDSet.has(groupID)).map(entry => entry[1]);
});
exports.getGroupsAssociatedToTeam = getGroupsAssociatedToTeam;
const getGroupsNotAssociatedToChannel = (0, _reselect.createSelector)(getAllGroups, (state, channelID) => getChannelGroupIDSet(state, channelID), (allGroups, channelGroupIDSet) => {
  return Object.entries(allGroups).filter(([groupID]) => !channelGroupIDSet.has(groupID)).map(entry => entry[1]);
});
exports.getGroupsNotAssociatedToChannel = getGroupsNotAssociatedToChannel;
const getGroupsAssociatedToChannel = (0, _reselect.createSelector)(getAllGroups, (state, channelID) => getChannelGroupIDSet(state, channelID), (allGroups, channelGroupIDSet) => {
  return Object.entries(allGroups).filter(([groupID]) => channelGroupIDSet.has(groupID)).map(entry => entry[1]);
});
exports.getGroupsAssociatedToChannel = getGroupsAssociatedToChannel;