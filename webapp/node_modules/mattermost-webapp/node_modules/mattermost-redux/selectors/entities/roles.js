"use strict";

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRoles = getRoles;
exports.haveICurrentChannelPermission = exports.haveICurrentTeamPermission = exports.haveIChannelPermission = exports.haveITeamPermission = exports.haveISystemPermission = exports.getMyChannelPermissions = exports.getMyTeamPermissions = exports.getMyCurrentChannelPermissions = exports.getMyCurrentTeamPermissions = exports.getMySystemPermissions = exports.getRolesById = exports.getMyRoles = exports.getMyChannelRoles = exports.getMyTeamRoles = exports.getMySystemRoles = void 0;

var _reselect = require("reselect");

var _common = require("./common");

var _teams = require("./teams");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
const getMySystemRoles = (0, _reselect.createSelector)(_common.getCurrentUser, user => {
  if (user) {
    return new Set(user.roles.split(' '));
  }

  return new Set();
});
exports.getMySystemRoles = getMySystemRoles;
const getMyTeamRoles = (0, _reselect.createSelector)(_teams.getTeamMemberships, teamsMemberships => {
  const roles = {};

  if (teamsMemberships) {
    for (const key in teamsMemberships) {
      if (teamsMemberships.hasOwnProperty(key) && teamsMemberships[key].roles) {
        roles[key] = new Set(teamsMemberships[key].roles.split(' '));
      }
    }
  }

  return roles;
});
exports.getMyTeamRoles = getMyTeamRoles;
const getMyChannelRoles = (0, _reselect.createSelector)(state => state.entities.channels.myMembers, channelsMemberships => {
  const roles = {};

  if (channelsMemberships) {
    for (const key in channelsMemberships) {
      if (channelsMemberships.hasOwnProperty(key) && channelsMemberships[key].roles) {
        roles[key] = new Set(channelsMemberships[key].roles.split(' '));
      }
    }
  }

  return roles;
});
exports.getMyChannelRoles = getMyChannelRoles;
const getMyRoles = (0, _reselect.createSelector)(getMySystemRoles, getMyTeamRoles, getMyChannelRoles, (systemRoles, teamRoles, channelRoles) => {
  return {
    system: systemRoles,
    team: teamRoles,
    channel: channelRoles
  };
});
exports.getMyRoles = getMyRoles;

function getRoles(state) {
  return state.entities.roles.roles;
}

const getRolesById = (0, _reselect.createSelector)(getRoles, rolesByName => {
  const rolesById = {};

  for (const role of Object.values(rolesByName)) {
    rolesById[role.id] = role;
  }

  return rolesById;
});
exports.getRolesById = getRolesById;
const getMySystemPermissions = (0, _reselect.createSelector)(getMySystemRoles, getRoles, (mySystemRoles, roles) => {
  const permissions = new Set();

  for (const roleName of mySystemRoles) {
    if (roles[roleName]) {
      for (const permission of roles[roleName].permissions) {
        permissions.add(permission);
      }
    }
  }

  return permissions;
});
exports.getMySystemPermissions = getMySystemPermissions;
const getMyCurrentTeamPermissions = (0, _reselect.createSelector)(getMyTeamRoles, getRoles, getMySystemPermissions, _teams.getCurrentTeamId, (myTeamRoles, roles, systemPermissions, teamId) => {
  const permissions = new Set();

  if (myTeamRoles[teamId]) {
    for (const roleName of myTeamRoles[teamId]) {
      if (roles[roleName]) {
        for (const permission of roles[roleName].permissions) {
          permissions.add(permission);
        }
      }
    }
  }

  for (const permission of systemPermissions) {
    permissions.add(permission);
  }

  return permissions;
});
exports.getMyCurrentTeamPermissions = getMyCurrentTeamPermissions;
const getMyCurrentChannelPermissions = (0, _reselect.createSelector)(getMyChannelRoles, getRoles, getMyCurrentTeamPermissions, _common.getCurrentChannelId, (myChannelRoles, roles, teamPermissions, channelId) => {
  const permissions = new Set();

  if (myChannelRoles[channelId]) {
    for (const roleName of myChannelRoles[channelId]) {
      if (roles[roleName]) {
        for (const permission of roles[roleName].permissions) {
          permissions.add(permission);
        }
      }
    }
  }

  for (const permission of teamPermissions) {
    permissions.add(permission);
  }

  return permissions;
});
exports.getMyCurrentChannelPermissions = getMyCurrentChannelPermissions;
const getMyTeamPermissions = (0, _reselect.createSelector)(getMyTeamRoles, getRoles, getMySystemPermissions, (state, options) => options.team, (myTeamRoles, roles, systemPermissions, teamId) => {
  const permissions = new Set();

  if (myTeamRoles[teamId]) {
    for (const roleName of myTeamRoles[teamId]) {
      if (roles[roleName]) {
        for (const permission of roles[roleName].permissions) {
          permissions.add(permission);
        }
      }
    }
  }

  for (const permission of systemPermissions) {
    permissions.add(permission);
  }

  return permissions;
});
exports.getMyTeamPermissions = getMyTeamPermissions;
const getMyChannelPermissions = (0, _reselect.createSelector)(getMyChannelRoles, getRoles, getMyTeamPermissions, (state, options) => options.channel, (myChannelRoles, roles, teamPermissions, channelId) => {
  const permissions = new Set();

  if (myChannelRoles[channelId]) {
    for (const roleName of myChannelRoles[channelId]) {
      if (roles[roleName]) {
        for (const permission of roles[roleName].permissions) {
          permissions.add(permission);
        }
      }
    }
  }

  for (const permission of teamPermissions) {
    permissions.add(permission);
  }

  return permissions;
});
exports.getMyChannelPermissions = getMyChannelPermissions;
const haveISystemPermission = (0, _reselect.createSelector)(getMySystemPermissions, (state, options) => options.permission, (permissions, permission) => {
  return permissions.has(permission);
});
exports.haveISystemPermission = haveISystemPermission;
const haveITeamPermission = (0, _reselect.createSelector)(getMyTeamPermissions, (state, options) => options.permission, (permissions, permission) => {
  return permissions.has(permission);
});
exports.haveITeamPermission = haveITeamPermission;
const haveIChannelPermission = (0, _reselect.createSelector)(getMyChannelPermissions, (state, options) => options.permission, (permissions, permission) => {
  return permissions.has(permission);
});
exports.haveIChannelPermission = haveIChannelPermission;
const haveICurrentTeamPermission = (0, _reselect.createSelector)(getMyCurrentTeamPermissions, (state, options) => options.permission, (permissions, permission) => {
  return permissions.has(permission);
});
exports.haveICurrentTeamPermission = haveICurrentTeamPermission;
const haveICurrentChannelPermission = (0, _reselect.createSelector)(getMyCurrentChannelPermissions, (state, options) => options.permission, (permissions, permission) => {
  return permissions.has(permission);
});
exports.haveICurrentChannelPermission = haveICurrentChannelPermission;