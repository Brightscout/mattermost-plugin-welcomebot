"use strict";

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.getLicense = getLicense;
exports.getSupportedTimezones = getSupportedTimezones;
exports.getCurrentUrl = getCurrentUrl;
exports.isCompatibleWithJoinViewTeamPermissions = isCompatibleWithJoinViewTeamPermissions;
exports.hasNewPermissions = hasNewPermissions;
exports.getServerVersion = exports.getAutolinkedUrlSchemes = exports.canDownloadFilesOnMobile = exports.canUploadFilesOnMobile = void 0;

var _reselect = require("reselect");

var _helpers = require("../../utils/helpers");

var _constants = require("../../constants");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getConfig(state
/*: GlobalState*/
)
/*: Object*/
{
  return state.entities.general.config;
}

function getLicense(state
/*: GlobalState*/
)
/*: Object*/
{
  return state.entities.general.license;
}

function getSupportedTimezones(state
/*: GlobalState*/
)
/*: Array<string>*/
{
  return state.entities.general.timezones;
}

function getCurrentUrl(state
/*: GlobalState*/
)
/*: string*/
{
  return state.entities.general.credentials.url;
}

function isCompatibleWithJoinViewTeamPermissions(state
/*: GlobalState*/
)
/*: boolean*/
{
  const version = state.entities.general.serverVersion;
  return (0, _helpers.isMinimumServerVersion)(version, 5, 10, 0) || version.indexOf('dev') !== -1 && (0, _helpers.isMinimumServerVersion)(version, 5, 8, 0) || version.match(/^5.8.\d.\d\d\d\d.*$/) !== null && (0, _helpers.isMinimumServerVersion)(version, 5, 8, 0);
}

function hasNewPermissions(state
/*: GlobalState*/
)
/*: boolean*/
{
  const version = state.entities.general.serverVersion; // FIXME This must be changed to 4, 9, 0 before we generate the 4.9.0 release

  return (0, _helpers.isMinimumServerVersion)(version, 4, 9, 0) || version.indexOf('dev') !== -1 && (0, _helpers.isMinimumServerVersion)(version, 4, 8, 0) || version.match(/^4.8.\d.\d\d\d\d.*$/) !== null && (0, _helpers.isMinimumServerVersion)(version, 4, 8, 0);
}

const canUploadFilesOnMobile
/*: (GlobalState) => boolean*/
= (0, _reselect.createSelector)(getConfig, getLicense, (config
/*: Object*/
, license
/*: Object*/
) =>
/*: boolean*/
{
  // Defaults to true if either setting doesn't exist
  return config.EnableFileAttachments !== 'false' && (license.IsLicensed === 'false' || license.Compliance === 'false' || config.EnableMobileFileUpload !== 'false');
});
exports.canUploadFilesOnMobile = canUploadFilesOnMobile;
const canDownloadFilesOnMobile
/*: (GlobalState) => boolean*/
= (0, _reselect.createSelector)(getConfig, getLicense, (config
/*: Object*/
, license
/*: Object*/
) =>
/*: boolean*/
{
  // Defaults to true if the setting doesn't exist
  return license.IsLicensed === 'false' || license.Compliance === 'false' || config.EnableMobileFileDownload !== 'false';
});
exports.canDownloadFilesOnMobile = canDownloadFilesOnMobile;
const getAutolinkedUrlSchemes
/*: (GlobalState) => string[]*/
= (0, _reselect.createSelector)(getConfig, (config
/*: Object*/
) =>
/*: string[]*/
{
  if (!config.CustomUrlSchemes) {
    return _constants.General.DEFAULT_AUTOLINKED_URL_SCHEMES;
  }

  return [..._constants.General.DEFAULT_AUTOLINKED_URL_SCHEMES, ...config.CustomUrlSchemes.split(',')];
});
exports.getAutolinkedUrlSchemes = getAutolinkedUrlSchemes;

const getServerVersion = (state
/*: GlobalState*/
) =>
/*: string*/
{
  return state.entities.general.serverVersion;
};

exports.getServerVersion = getServerVersion;