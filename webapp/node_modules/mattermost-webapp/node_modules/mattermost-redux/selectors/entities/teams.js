"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCurrentTeamId = getCurrentTeamId;
exports.getTeams = getTeams;
exports.getTeamStats = getTeamStats;
exports.getTeamMemberships = getTeamMemberships;
exports.getMembersInTeams = getMembersInTeams;
exports.getTeam = getTeam;
exports.getTeamMember = getTeamMember;
exports.makeGetBadgeCountForTeamId = makeGetBadgeCountForTeamId;
exports.getChannelDrawerBadgeCount = exports.getMyTeamsCount = exports.getMySortedTeamIds = exports.getSortedJoinableTeams = exports.getJoinableTeams = exports.getJoinableTeamIds = exports.getSortedListableTeams = exports.getListableTeams = exports.getListableTeamIds = exports.getMembersInCurrentTeam = exports.getMyTeamMember = exports.getMyTeams = exports.getCurrentTeamStats = exports.getCurrentRelativeTeamUrl = exports.getCurrentTeamUrl = exports.isCurrentUserCurrentTeamAdmin = exports.getCurrentTeamMembership = exports.getCurrentTeam = exports.getTeamsList = exports.getTeamByName = void 0;

var _reselect = require("reselect");

var _constants = require("../../constants");

var _general = require("./general");

var _roles = require("./roles");

var _helpers = require("../../utils/helpers");

var _user_utils = require("../../utils/user_utils");

var _team_utils = require("../../utils/team_utils");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
function getCurrentTeamId(state) {
  return state.entities.teams.currentTeamId;
}

const getTeamByName = (0, _reselect.createSelector)(getTeams, (state, name) => name, (teams, name) => {
  return Object.values(teams).find(team => team.name === name);
});
exports.getTeamByName = getTeamByName;

function getTeams(state) {
  return state.entities.teams.teams;
}

function getTeamStats(state) {
  return state.entities.teams.stats;
}

function getTeamMemberships(state) {
  return state.entities.teams.myMembers;
}

function getMembersInTeams(state) {
  return state.entities.teams.membersInTeam;
}

const getTeamsList = (0, _reselect.createSelector)(getTeams, teams => {
  return Object.values(teams);
});
exports.getTeamsList = getTeamsList;
const getCurrentTeam = (0, _reselect.createSelector)(getTeams, getCurrentTeamId, (teams, currentTeamId) => {
  return teams[currentTeamId];
});
exports.getCurrentTeam = getCurrentTeam;

function getTeam(state, id) {
  const teams = getTeams(state);
  return teams[id];
}

const getCurrentTeamMembership = (0, _reselect.createSelector)(getCurrentTeamId, getTeamMemberships, (currentTeamId, teamMemberships) => {
  return teamMemberships[currentTeamId];
});
exports.getCurrentTeamMembership = getCurrentTeamMembership;
const isCurrentUserCurrentTeamAdmin = (0, _reselect.createSelector)(getCurrentTeamMembership, member => {
  if (member) {
    const roles = member.roles || '';
    return (0, _user_utils.isTeamAdmin)(roles);
  }

  return false;
});
exports.isCurrentUserCurrentTeamAdmin = isCurrentUserCurrentTeamAdmin;
const getCurrentTeamUrl = (0, _reselect.createSelector)(_general.getCurrentUrl, getCurrentTeam, state => (0, _general.getConfig)(state).SiteURL, (currentURL, currentTeam, siteURL) => {
  const rootURL = "".concat(currentURL || siteURL);

  if (!currentTeam) {
    return rootURL;
  }

  return "".concat(rootURL, "/").concat(currentTeam.name);
});
exports.getCurrentTeamUrl = getCurrentTeamUrl;
const getCurrentRelativeTeamUrl = (0, _reselect.createSelector)(getCurrentTeam, currentTeam => {
  if (!currentTeam) {
    return '/';
  }

  return "/".concat(currentTeam.name);
});
exports.getCurrentRelativeTeamUrl = getCurrentRelativeTeamUrl;
const getCurrentTeamStats = (0, _reselect.createSelector)(getCurrentTeamId, getTeamStats, (currentTeamId, teamStats) => {
  return teamStats[currentTeamId];
});
exports.getCurrentTeamStats = getCurrentTeamStats;
const getMyTeams = (0, _reselect.createSelector)(getTeams, getTeamMemberships, (teams, members) => {
  return Object.values(teams).filter(t => members[t.id] && t.delete_at === 0);
});
exports.getMyTeams = getMyTeams;
const getMyTeamMember = (0, _reselect.createSelector)(getTeamMemberships, (state, teamId) => teamId, (teamMemberships, teamId) => {
  return teamMemberships[teamId] || {};
});
exports.getMyTeamMember = getMyTeamMember;
const getMembersInCurrentTeam = (0, _reselect.createSelector)(getCurrentTeamId, getMembersInTeams, (currentTeamId, teamMembers) => {
  return teamMembers[currentTeamId];
});
exports.getMembersInCurrentTeam = getMembersInCurrentTeam;

function getTeamMember(state, teamId, userId) {
  const members = getMembersInTeams(state)[teamId];

  if (members) {
    return members[userId];
  }

  return null;
}

const getListableTeamIds = (0, _helpers.createIdsSelector)(getTeams, getTeamMemberships, state => (0, _roles.haveISystemPermission)(state, {
  permission: _constants.Permissions.LIST_PUBLIC_TEAMS
}), state => (0, _roles.haveISystemPermission)(state, {
  permission: _constants.Permissions.LIST_PRIVATE_TEAMS
}), _general.isCompatibleWithJoinViewTeamPermissions, (teams, myMembers, canListPublicTeams, canListPrivateTeams, compatibleWithJoinViewTeamPermissions) => {
  return Object.keys(teams).filter(id => {
    const team = teams[id];
    const member = myMembers[id];
    let canList = team.allow_open_invite;

    if (compatibleWithJoinViewTeamPermissions) {
      canList = canListPrivateTeams && !team.allow_open_invite || canListPublicTeams && team.allow_open_invite;
    }

    return team.delete_at === 0 && canList && !member;
  });
});
exports.getListableTeamIds = getListableTeamIds;
const getListableTeams = (0, _reselect.createSelector)(getTeams, getListableTeamIds, (teams, listableTeamIds) => {
  return listableTeamIds.map(id => teams[id]);
});
exports.getListableTeams = getListableTeams;
const getSortedListableTeams = (0, _reselect.createSelector)(getTeams, getListableTeamIds, (state, locale) => locale, (teams, listableTeamIds, locale) => {
  const listableTeams = {};

  for (const id of listableTeamIds) {
    listableTeams[id] = teams[id];
  }

  return Object.values(listableTeams).sort((0, _team_utils.sortTeamsWithLocale)(locale));
});
exports.getSortedListableTeams = getSortedListableTeams;
const getJoinableTeamIds = (0, _helpers.createIdsSelector)(getTeams, getTeamMemberships, state => (0, _roles.haveISystemPermission)(state, {
  permission: _constants.Permissions.JOIN_PUBLIC_TEAMS
}), state => (0, _roles.haveISystemPermission)(state, {
  permission: _constants.Permissions.JOIN_PRIVATE_TEAMS
}), _general.isCompatibleWithJoinViewTeamPermissions, (teams, myMembers, canJoinPublicTeams, canJoinPrivateTeams, compatibleWithJoinViewTeamPermissions) => {
  return Object.keys(teams).filter(id => {
    const team = teams[id];
    const member = myMembers[id];
    let canJoin = team.allow_open_invite;

    if (compatibleWithJoinViewTeamPermissions) {
      canJoin = canJoinPrivateTeams && !team.allow_open_invite || canJoinPublicTeams && team.allow_open_invite;
    }

    return team.delete_at === 0 && canJoin && !member;
  });
});
exports.getJoinableTeamIds = getJoinableTeamIds;
const getJoinableTeams = (0, _reselect.createSelector)(getTeams, getJoinableTeamIds, (teams, joinableTeamIds) => {
  return joinableTeamIds.map(id => teams[id]);
});
exports.getJoinableTeams = getJoinableTeams;
const getSortedJoinableTeams = (0, _reselect.createSelector)(getTeams, getJoinableTeamIds, (state, locale) => locale, (teams, joinableTeamIds, locale) => {
  const joinableTeams = {};

  for (const id of joinableTeamIds) {
    joinableTeams[id] = teams[id];
  }

  return Object.values(joinableTeams).sort((0, _team_utils.sortTeamsWithLocale)(locale));
});
exports.getSortedJoinableTeams = getSortedJoinableTeams;
const getMySortedTeamIds = (0, _helpers.createIdsSelector)(getMyTeams, (state, locale) => locale, (teams, locale) => {
  return teams.sort((0, _team_utils.sortTeamsWithLocale)(locale)).map(t => t.id);
});
exports.getMySortedTeamIds = getMySortedTeamIds;
const getMyTeamsCount = (0, _reselect.createSelector)(getMyTeams, teams => {
  return teams.length;
}); // returns the badge number to show (excluding the current team)
// > 0 means is returning the mention count
// 0 means that there are no unread messages
// -1 means that there are unread messages but no mentions

exports.getMyTeamsCount = getMyTeamsCount;
const getChannelDrawerBadgeCount = (0, _reselect.createSelector)(getCurrentTeamId, getTeamMemberships, (currentTeamId, teamMembers) => {
  let mentionCount = 0;
  let messageCount = 0;
  Object.values(teamMembers).forEach(m => {
    if (m.team_id !== currentTeamId) {
      mentionCount += m.mention_count || 0;
      messageCount += m.msg_count || 0;
    }
  });
  let badgeCount = 0;

  if (mentionCount) {
    badgeCount = mentionCount;
  } else if (messageCount) {
    badgeCount = -1;
  }

  return badgeCount;
}); // returns the badge for a team
// > 0 means is returning the mention count
// 0 means that there are no unread messages
// -1 means that there are unread messages but no mentions

exports.getChannelDrawerBadgeCount = getChannelDrawerBadgeCount;

function makeGetBadgeCountForTeamId() {
  return (0, _reselect.createSelector)(getTeamMemberships, (state, id) => id, (members, teamId) => {
    const member = members[teamId];
    let badgeCount = 0;

    if (member) {
      if (member.mention_count) {
        badgeCount = member.mention_count;
      } else if (member.msg_count) {
        badgeCount = -1;
      }
    }

    return badgeCount;
  });
}