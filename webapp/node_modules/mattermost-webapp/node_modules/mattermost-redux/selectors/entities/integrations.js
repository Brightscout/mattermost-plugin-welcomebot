"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIncomingHooks = getIncomingHooks;
exports.getOutgoingHooks = getOutgoingHooks;
exports.getCommands = getCommands;
exports.getOAuthApps = getOAuthApps;
exports.getSystemCommands = getSystemCommands;
exports.getAutocompleteCommandsList = exports.getAllCommands = exports.getOutgoingHooksInCurrentTeam = void 0;

var _reselect = require("reselect");

var _teams = require("./teams");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIncomingHooks(state) {
  return state.entities.integrations.incomingHooks;
}

function getOutgoingHooks(state) {
  return state.entities.integrations.outgoingHooks;
}

function getCommands(state) {
  return state.entities.integrations.commands;
}

function getOAuthApps(state) {
  return state.entities.integrations.oauthApps;
}

function getSystemCommands(state) {
  return state.entities.integrations.systemCommands;
}
/**
 * get outgoing hooks in current team
 */


const getOutgoingHooksInCurrentTeam = (0, _reselect.createSelector)(_teams.getCurrentTeamId, getOutgoingHooks, (teamId, hooks) => {
  return Object.values(hooks).filter(o => o.teamId === teamId);
});
exports.getOutgoingHooksInCurrentTeam = getOutgoingHooksInCurrentTeam;
const getAllCommands = (0, _reselect.createSelector)(getCommands, getSystemCommands, (commands, systemCommands) => {
  return _objectSpread({}, commands, {}, systemCommands);
});
exports.getAllCommands = getAllCommands;
const getAutocompleteCommandsList = (0, _reselect.createSelector)(getAllCommands, _teams.getCurrentTeamId, (commands, currentTeamId) => {
  return Object.values(commands).filter(command => {
    return command && (!command.team_id || command.team_id === currentTeamId) && command.auto_complete;
  }).sort((a, b) => a.display_name.localeCompare(b.display_name));
});
exports.getAutocompleteCommandsList = getAutocompleteCommandsList;