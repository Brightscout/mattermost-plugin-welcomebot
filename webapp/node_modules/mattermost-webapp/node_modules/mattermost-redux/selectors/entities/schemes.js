"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSchemes = getSchemes;
exports.getScheme = getScheme;
exports.makeGetSchemeChannels = makeGetSchemeChannels;
exports.makeGetSchemeTeams = makeGetSchemeTeams;

var _reselect = require("reselect");

var _channels = require("./channels");

var _teams = require("./teams");

var _schemes = require("../../constants/schemes");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getSchemes(state
/*: GlobalState*/
)
/*: { [string]: Scheme }*/
{
  return state.entities.schemes.schemes;
}

function getScheme(state
/*: GlobalState*/
, id
/*: string*/
)
/*: Scheme*/
{
  const schemes = getSchemes(state);
  return schemes[id];
}

function makeGetSchemeChannels() {
  return ((0, _reselect.createSelector)(_channels.getAllChannels, (state, props
  /*: {schemeId: string}*/
  ) => getScheme(state, props.schemeId), (allChannels, scheme) => {
    if (!scheme) {
      return [];
    }

    if (scheme.scope === _schemes.ScopeTypes.TEAM) {
      const msg = "Not implemented: scheme '".concat(scheme.id, "' is team-scope but 'getSchemeChannels' only accepts channel-scoped schemes.");
      console.log(msg); // eslint-disable-line no-console

      return [];
    }

    const schemeChannels
    /*: Array<Channel>*/
    = []; // $FlowFixMe

    Object.entries(allChannels).forEach((item
    /*: [string, Channel]*/
    ) => {
      const [, channel
      /*: Channel*/
      ] = item;

      if (channel.scheme_id === scheme.id) {
        schemeChannels.push(channel);
      }
    });
    return schemeChannels;
  })
  /*: (GlobalState, {schemeId: string}) => Array<Channel>*/
  );
}

function makeGetSchemeTeams() {
  return ((0, _reselect.createSelector)(_teams.getTeams, (state, props
  /*: {schemeId: string}*/
  ) => getScheme(state, props.schemeId), (allTeams, scheme) => {
    if (!scheme) {
      return [];
    }

    if (scheme.scope === _schemes.ScopeTypes.CHANNEL) {
      const msg = "Error: scheme '".concat(scheme.id, "' is channel-scoped but 'getSchemeChannels' only accepts team-scoped schemes.");
      console.log(msg); // eslint-disable-line no-console

      return [];
    }

    const schemeTeams
    /*: Array<Team>*/
    = []; // $FlowFixMe

    Object.entries(allTeams).forEach((item
    /*: [string, Team]*/
    ) => {
      const [, team
      /*: Team*/
      ] = item;

      if (team.scheme_id === scheme.id) {
        schemeTeams.push(team);
      }
    });
    return schemeTeams;
  })
  /*: (GlobalState, {schemeId: string}) => Array<Team>*/
  );
}