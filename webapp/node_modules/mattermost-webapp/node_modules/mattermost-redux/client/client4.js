"use strict";

require("core-js/modules/es.promise");

require("core-js/modules/es.string.match");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.starts-with");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientError = exports.default = exports.HEADER_X_VERSION_ID = void 0;

var _user_utils = require("../utils/user_utils");

var _fetch_etag = _interopRequireDefault(require("./fetch_etag"));

var _helpers = require("../utils/helpers");

var _sentry = require("../utils/sentry");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const FormData = require('form-data');

const HEADER_AUTH = 'Authorization';
const HEADER_BEARER = 'BEARER';
const HEADER_REQUESTED_WITH = 'X-Requested-With';
const HEADER_USER_AGENT = 'User-Agent';
const HEADER_X_CLUSTER_ID = 'X-Cluster-Id';
const HEADER_X_CSRF_TOKEN = 'X-CSRF-Token';
const HEADER_X_VERSION_ID = 'X-Version-Id';
exports.HEADER_X_VERSION_ID = HEADER_X_VERSION_ID;
const PER_PAGE_DEFAULT = 60;
const LOGS_PER_PAGE_DEFAULT = 10000;
/* eslint-disable no-throw-literal */

class Client4 {
  constructor() {
    _defineProperty(this, "createUser", async (user, token, inviteId) => {
      this.trackEvent('api', 'api_users_create');
      const queryParams = {};

      if (token) {
        queryParams.t = token;
      }

      if (inviteId) {
        queryParams.iid = inviteId;
      }

      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)(queryParams)), {
        method: 'post',
        body: JSON.stringify(user)
      });
    });

    _defineProperty(this, "patchMe", async userPatch => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/patch"), {
        method: 'put',
        body: JSON.stringify(userPatch)
      });
    });

    _defineProperty(this, "patchUser", async userPatch => {
      this.trackEvent('api', 'api_users_patch');
      return this.doFetch("".concat(this.getUserRoute(userPatch.id), "/patch"), {
        method: 'put',
        body: JSON.stringify(userPatch)
      });
    });

    _defineProperty(this, "updateUser", async user => {
      this.trackEvent('api', 'api_users_update');
      return this.doFetch("".concat(this.getUserRoute(user.id)), {
        method: 'put',
        body: JSON.stringify(user)
      });
    });

    _defineProperty(this, "promoteGuestToUser", async userId => {
      this.trackEvent('api', 'api_users_promote_guest_to_user');
      return this.doFetch("".concat(this.getUserRoute(userId), "/promote"), {
        method: 'post'
      });
    });

    _defineProperty(this, "demoteUserToGuest", async userId => {
      this.trackEvent('api', 'api_users_demote_user_to_guest');
      return this.doFetch("".concat(this.getUserRoute(userId), "/demote"), {
        method: 'post'
      });
    });

    _defineProperty(this, "updateUserRoles", async (userId, roles) => {
      this.trackEvent('api', 'api_users_update_roles');
      return this.doFetch("".concat(this.getUserRoute(userId), "/roles"), {
        method: 'put',
        body: JSON.stringify({
          roles
        })
      });
    });

    _defineProperty(this, "updateUserMfa", async (userId, activate, code) => {
      const body = {
        activate
      };

      if (activate) {
        body.code = code;
      }

      return this.doFetch("".concat(this.getUserRoute(userId), "/mfa"), {
        method: 'put',
        body: JSON.stringify(body)
      });
    });

    _defineProperty(this, "updateUserPassword", async (userId, currentPassword, newPassword) => {
      this.trackEvent('api', 'api_users_newpassword');
      return this.doFetch("".concat(this.getUserRoute(userId), "/password"), {
        method: 'put',
        body: JSON.stringify({
          current_password: currentPassword,
          new_password: newPassword
        })
      });
    });

    _defineProperty(this, "resetUserPassword", async (token, newPassword) => {
      this.trackEvent('api', 'api_users_reset_password');
      return this.doFetch("".concat(this.getUsersRoute(), "/password/reset"), {
        method: 'post',
        body: JSON.stringify({
          token,
          new_password: newPassword
        })
      });
    });

    _defineProperty(this, "sendPasswordResetEmail", async email => {
      this.trackEvent('api', 'api_users_send_password_reset');
      return this.doFetch("".concat(this.getUsersRoute(), "/password/reset/send"), {
        method: 'post',
        body: JSON.stringify({
          email
        })
      });
    });

    _defineProperty(this, "updateUserActive", async (userId, active) => {
      this.trackEvent('api', 'api_users_update_active');
      return this.doFetch("".concat(this.getUserRoute(userId), "/active"), {
        method: 'put',
        body: JSON.stringify({
          active
        })
      });
    });

    _defineProperty(this, "uploadProfileImage", async (userId, imageData) => {
      this.trackEvent('api', 'api_users_update_profile_picture');
      const formData = new FormData();
      formData.append('image', imageData);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getUserRoute(userId), "/image"), request);
    });

    _defineProperty(this, "setDefaultProfileImage", async userId => {
      this.trackEvent('api', 'api_users_set_default_profile_picture');
      return this.doFetch("".concat(this.getUserRoute(userId), "/image"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "verifyUserEmail", async token => {
      return this.doFetch("".concat(this.getUsersRoute(), "/email/verify"), {
        method: 'post',
        body: JSON.stringify({
          token
        })
      });
    });

    _defineProperty(this, "updateMyTermsOfServiceStatus", async (termsOfServiceId, accepted) => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/terms_of_service"), {
        method: 'post',
        body: JSON.stringify({
          termsOfServiceId,
          accepted
        })
      });
    });

    _defineProperty(this, "getTermsOfService", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/terms_of_service"), {
        method: 'get'
      });
    });

    _defineProperty(this, "createTermsOfService", async text => {
      return this.doFetch("".concat(this.getBaseRoute(), "/terms_of_service"), {
        method: 'post',
        body: JSON.stringify({
          text
        })
      });
    });

    _defineProperty(this, "sendVerificationEmail", async email => {
      return this.doFetch("".concat(this.getUsersRoute(), "/email/verify/send"), {
        method: 'post',
        body: JSON.stringify({
          email
        })
      });
    });

    _defineProperty(this, "login", async (loginId, password, token = '', deviceId = '', ldapOnly = false) => {
      this.trackEvent('api', 'api_users_login');

      if (ldapOnly) {
        this.trackEvent('api', 'api_users_login_ldap');
      }

      const body = {
        device_id: deviceId,
        login_id: loginId,
        password,
        token
      };

      if (ldapOnly) {
        body.ldap_only = 'true';
      }

      const {
        data
      } = await this.doFetchWithResponse("".concat(this.getUsersRoute(), "/login"), {
        method: 'post',
        body: JSON.stringify(body)
      });
      return data;
    });

    _defineProperty(this, "loginById", async (id, password, token = '', deviceId = '') => {
      this.trackEvent('api', 'api_users_login');
      const body = {
        device_id: deviceId,
        id,
        password,
        token
      };
      const {
        data
      } = await this.doFetchWithResponse("".concat(this.getUsersRoute(), "/login"), {
        method: 'post',
        body: JSON.stringify(body)
      });
      return data;
    });

    _defineProperty(this, "logout", async () => {
      this.trackEvent('api', 'api_users_logout');
      const {
        response
      } = await this.doFetchWithResponse("".concat(this.getUsersRoute(), "/logout"), {
        method: 'post'
      });

      if (response.ok) {
        this.token = '';
      }

      this.serverVersion = '';
      return response;
    });

    _defineProperty(this, "getProfiles", async (page = 0, perPage = PER_PAGE_DEFAULT, options = {}) => {
      this.trackEvent('api', 'api_profiles_get');
      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)(_objectSpread({
        page,
        per_page: perPage
      }, options))), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilesByIds", async (userIds, options = {}) => {
      this.trackEvent('api', 'api_profiles_get_by_ids');
      return this.doFetch("".concat(this.getUsersRoute(), "/ids").concat((0, _helpers.buildQueryString)(options)), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "getProfilesByUsernames", async usernames => {
      this.trackEvent('api', 'api_profiles_get_by_usernames');
      return this.doFetch("".concat(this.getUsersRoute(), "/usernames"), {
        method: 'post',
        body: JSON.stringify(usernames)
      });
    });

    _defineProperty(this, "getProfilesInTeam", async (teamId, page = 0, perPage = PER_PAGE_DEFAULT, sort = '') => {
      this.trackEvent('api', 'api_profiles_get_in_team', {
        team_id: teamId,
        sort
      });
      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)({
        in_team: teamId,
        page,
        per_page: perPage,
        sort
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilesNotInTeam", async (teamId, groupConstrained, page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_profiles_get_not_in_team', {
        team_id: teamId,
        group_constrained: groupConstrained
      });
      const queryStringObj = {
        not_in_team: teamId,
        page,
        per_page: perPage
      };

      if (groupConstrained) {
        queryStringObj.group_constrained = true;
      }

      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)(queryStringObj)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilesWithoutTeam", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_profiles_get_without_team');
      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)({
        without_team: 1,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilesInChannel", async (channelId, page = 0, perPage = PER_PAGE_DEFAULT, sort = '') => {
      this.trackEvent('api', 'api_profiles_get_in_channel', {
        channel_id: channelId
      });
      const serverVersion = this.getServerVersion();
      let queryStringObj;

      if ((0, _helpers.isMinimumServerVersion)(serverVersion, 4, 7)) {
        queryStringObj = {
          in_channel: channelId,
          page,
          per_page: perPage,
          sort
        };
      } else {
        queryStringObj = {
          in_channel: channelId,
          page,
          per_page: perPage
        };
      }

      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)(queryStringObj)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilesInGroupChannels", async channelsIds => {
      this.trackEvent('api', 'api_profiles_get_in_group_channels', {
        channelsIds
      });
      return this.doFetch("".concat(this.getUsersRoute(), "/group_channels"), {
        method: 'post',
        body: JSON.stringify(channelsIds)
      });
    });

    _defineProperty(this, "getProfilesNotInChannel", async (teamId, channelId, groupConstrained, page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_profiles_get_not_in_channel', {
        team_id: teamId,
        channel_id: channelId,
        group_constrained: groupConstrained
      });
      const queryStringObj = {
        in_team: teamId,
        not_in_channel: channelId,
        page,
        per_page: perPage
      };

      if (groupConstrained) {
        queryStringObj.group_constrained = true;
      }

      return this.doFetch("".concat(this.getUsersRoute()).concat((0, _helpers.buildQueryString)(queryStringObj)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMe", async () => {
      return this.doFetch("".concat(this.getUserRoute('me')), {
        method: 'get'
      });
    });

    _defineProperty(this, "getUser", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getUserByUsername", async username => {
      return this.doFetch("".concat(this.getUsersRoute(), "/username/").concat(username), {
        method: 'get'
      });
    });

    _defineProperty(this, "getUserByEmail", async email => {
      return this.doFetch("".concat(this.getUsersRoute(), "/email/").concat(email), {
        method: 'get'
      });
    });

    _defineProperty(this, "getProfilePictureUrl", (userId, lastPictureUpdate) => {
      const params = {};

      if (lastPictureUpdate) {
        params._ = lastPictureUpdate;
      }

      return "".concat(this.getUserRoute(userId), "/image").concat((0, _helpers.buildQueryString)(params));
    });

    _defineProperty(this, "getDefaultProfilePictureUrl", userId => {
      return "".concat(this.getUserRoute(userId), "/image/default");
    });

    _defineProperty(this, "autocompleteUsers", async (name, teamId, channelId, options = {
      limit: _constants.General.AUTOCOMPLETE_LIMIT_DEFAULT
    }) => {
      return this.doFetch("".concat(this.getUsersRoute(), "/autocomplete").concat((0, _helpers.buildQueryString)({
        in_team: teamId,
        in_channel: channelId,
        name,
        limit: options.limit
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getSessions", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/sessions"), {
        method: 'get'
      });
    });

    _defineProperty(this, "revokeSession", async (userId, sessionId) => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/sessions/revoke"), {
        method: 'post',
        body: JSON.stringify({
          session_id: sessionId
        })
      });
    });

    _defineProperty(this, "revokeAllSessionsForUser", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/sessions/revoke/all"), {
        method: 'post'
      });
    });

    _defineProperty(this, "revokeSessionsForAllUsers", async () => {
      return this.doFetch("".concat(this.getUsersRoute(), "/sessions/revoke/all"), {
        method: 'post'
      });
    });

    _defineProperty(this, "getUserAudits", async (userId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/audits").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "checkUserMfa", async loginId => {
      return this.doFetch("".concat(this.getUsersRoute(), "/mfa"), {
        method: 'post',
        body: JSON.stringify({
          login_id: loginId
        })
      });
    });

    _defineProperty(this, "generateMfaSecret", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/mfa/generate"), {
        method: 'post'
      });
    });

    _defineProperty(this, "attachDevice", async deviceId => {
      return this.doFetch("".concat(this.getUsersRoute(), "/sessions/device"), {
        method: 'put',
        body: JSON.stringify({
          device_id: deviceId
        })
      });
    });

    _defineProperty(this, "searchUsers", (term, options) => {
      this.trackEvent('api', 'api_search_users');
      return this.doFetch("".concat(this.getUsersRoute(), "/search"), {
        method: 'post',
        body: JSON.stringify(_objectSpread({
          term
        }, options))
      });
    });

    _defineProperty(this, "getStatusesByIds", async userIds => {
      return this.doFetch("".concat(this.getUsersRoute(), "/status/ids"), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "getStatus", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/status"), {
        method: 'get'
      });
    });

    _defineProperty(this, "updateStatus", async status => {
      return this.doFetch("".concat(this.getUserRoute(status.user_id), "/status"), {
        method: 'put',
        body: JSON.stringify(status)
      });
    });

    _defineProperty(this, "switchEmailToOAuth", async (service, email, password, mfaCode = '') => {
      this.trackEvent('api', 'api_users_email_to_oauth');
      return this.doFetch("".concat(this.getUsersRoute(), "/login/switch"), {
        method: 'post',
        body: JSON.stringify({
          current_service: 'email',
          new_service: service,
          email,
          password,
          mfa_code: mfaCode
        })
      });
    });

    _defineProperty(this, "switchOAuthToEmail", async (currentService, email, password) => {
      this.trackEvent('api', 'api_users_oauth_to_email');
      return this.doFetch("".concat(this.getUsersRoute(), "/login/switch"), {
        method: 'post',
        body: JSON.stringify({
          current_service: currentService,
          new_service: 'email',
          email,
          new_password: password
        })
      });
    });

    _defineProperty(this, "switchEmailToLdap", async (email, emailPassword, ldapId, ldapPassword, mfaCode = '') => {
      this.trackEvent('api', 'api_users_email_to_ldap');
      return this.doFetch("".concat(this.getUsersRoute(), "/login/switch"), {
        method: 'post',
        body: JSON.stringify({
          current_service: 'email',
          new_service: 'ldap',
          email,
          password: emailPassword,
          ldap_id: ldapId,
          new_password: ldapPassword,
          mfa_code: mfaCode
        })
      });
    });

    _defineProperty(this, "switchLdapToEmail", async (ldapPassword, email, emailPassword, mfaCode = '') => {
      this.trackEvent('api', 'api_users_ldap_to_email');
      return this.doFetch("".concat(this.getUsersRoute(), "/login/switch"), {
        method: 'post',
        body: JSON.stringify({
          current_service: 'ldap',
          new_service: 'email',
          email,
          password: ldapPassword,
          new_password: emailPassword,
          mfa_code: mfaCode
        })
      });
    });

    _defineProperty(this, "getAuthorizedOAuthApps", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/oauth/apps/authorized"), {
        method: 'get'
      });
    });

    _defineProperty(this, "authorizeOAuthApp", async (responseType, clientId, redirectUri, state, scope) => {
      return this.doFetch("".concat(this.url, "/oauth/authorize"), {
        method: 'post',
        body: JSON.stringify({
          client_id: clientId,
          response_type: responseType,
          redirect_uri: redirectUri,
          state,
          scope
        })
      });
    });

    _defineProperty(this, "deauthorizeOAuthApp", async clientId => {
      return this.doFetch("".concat(this.url, "/oauth/deauthorize"), {
        method: 'post',
        body: JSON.stringify({
          client_id: clientId
        })
      });
    });

    _defineProperty(this, "createUserAccessToken", async (userId, description) => {
      this.trackEvent('api', 'api_users_create_access_token');
      return this.doFetch("".concat(this.getUserRoute(userId), "/tokens"), {
        method: 'post',
        body: JSON.stringify({
          description
        })
      });
    });

    _defineProperty(this, "getUserAccessToken", async tokenId => {
      return this.doFetch("".concat(this.getUsersRoute(), "/tokens/").concat(tokenId), {
        method: 'get'
      });
    });

    _defineProperty(this, "getUserAccessTokensForUser", async (userId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/tokens").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getUserAccessTokens", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getUsersRoute(), "/tokens").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "revokeUserAccessToken", async tokenId => {
      this.trackEvent('api', 'api_users_revoke_access_token');
      return this.doFetch("".concat(this.getUsersRoute(), "/tokens/revoke"), {
        method: 'post',
        body: JSON.stringify({
          token_id: tokenId
        })
      });
    });

    _defineProperty(this, "disableUserAccessToken", async tokenId => {
      return this.doFetch("".concat(this.getUsersRoute(), "/tokens/disable"), {
        method: 'post',
        body: JSON.stringify({
          token_id: tokenId
        })
      });
    });

    _defineProperty(this, "enableUserAccessToken", async tokenId => {
      return this.doFetch("".concat(this.getUsersRoute(), "/tokens/enable"), {
        method: 'post',
        body: JSON.stringify({
          token_id: tokenId
        })
      });
    });

    _defineProperty(this, "createTeam", async team => {
      this.trackEvent('api', 'api_teams_create');
      return this.doFetch("".concat(this.getTeamsRoute()), {
        method: 'post',
        body: JSON.stringify(team)
      });
    });

    _defineProperty(this, "deleteTeam", async teamId => {
      this.trackEvent('api', 'api_teams_delete');
      return this.doFetch("".concat(this.getTeamRoute(teamId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateTeam", async team => {
      this.trackEvent('api', 'api_teams_update_name', {
        team_id: team.id
      });
      return this.doFetch("".concat(this.getTeamRoute(team.id)), {
        method: 'put',
        body: JSON.stringify(team)
      });
    });

    _defineProperty(this, "patchTeam", async team => {
      this.trackEvent('api', 'api_teams_patch_name', {
        team_id: team.id
      });
      return this.doFetch("".concat(this.getTeamRoute(team.id), "/patch"), {
        method: 'put',
        body: JSON.stringify(team)
      });
    });

    _defineProperty(this, "regenerateTeamInviteId", async teamId => {
      this.trackEvent('api', 'api_teams_regenerate_invite_id', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/regenerate_invite_id"), {
        method: 'post'
      });
    });

    _defineProperty(this, "updateTeamScheme", async (teamId, schemeId) => {
      const patch = {
        scheme_id: schemeId
      };
      this.trackEvent('api', 'api_teams_update_scheme', _objectSpread({
        team_id: teamId
      }, patch));
      return this.doFetch("".concat(this.getTeamSchemeRoute(teamId)), {
        method: 'put',
        body: JSON.stringify(patch)
      });
    });

    _defineProperty(this, "checkIfTeamExists", async teamName => {
      return this.doFetch("".concat(this.getTeamNameRoute(teamName), "/exists"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeams", async (page = 0, perPage = PER_PAGE_DEFAULT, includeTotalCount = false) => {
      return this.doFetch("".concat(this.getTeamsRoute()).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage,
        include_total_count: includeTotalCount
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "searchTeams", term => {
      this.trackEvent('api', 'api_search_teams');
      return this.doFetch("".concat(this.getTeamsRoute(), "/search"), {
        method: 'post',
        body: JSON.stringify({
          term
        })
      });
    });

    _defineProperty(this, "getTeam", async teamId => {
      return this.doFetch(this.getTeamRoute(teamId), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamByName", async teamName => {
      this.trackEvent('api', 'api_teams_get_team_by_name');
      return this.doFetch(this.getTeamNameRoute(teamName), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyTeams", async () => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/teams"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamsForUser", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/teams"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyTeamMembers", async () => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/teams/members"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyTeamUnreads", async () => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/teams/unread"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamMembers", async (teamId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getTeamMembersRoute(teamId)).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamMembersForUser", async userId => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/teams/members"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamMember", async (teamId, userId) => {
      return this.doFetch("".concat(this.getTeamMemberRoute(teamId, userId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTeamMembersByIds", async (teamId, userIds) => {
      return this.doFetch("".concat(this.getTeamMembersRoute(teamId), "/ids"), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "addToTeam", async (teamId, userId) => {
      this.trackEvent('api', 'api_teams_invite_members', {
        team_id: teamId
      });
      const member = {
        user_id: userId,
        team_id: teamId
      };
      return this.doFetch("".concat(this.getTeamMembersRoute(teamId)), {
        method: 'post',
        body: JSON.stringify(member)
      });
    });

    _defineProperty(this, "addToTeamFromInvite", async (token = '', inviteId = '') => {
      this.trackEvent('api', 'api_teams_invite_members');
      const query = (0, _helpers.buildQueryString)({
        token,
        invite_id: inviteId
      });
      return this.doFetch("".concat(this.getTeamsRoute(), "/members/invite").concat(query), {
        method: 'post'
      });
    });

    _defineProperty(this, "addUsersToTeam", async (teamId, userIds) => {
      this.trackEvent('api', 'api_teams_batch_add_members', {
        team_id: teamId,
        count: userIds.length
      });
      const members = [];
      userIds.forEach(id => members.push({
        team_id: teamId,
        user_id: id
      }));
      return this.doFetch("".concat(this.getTeamMembersRoute(teamId), "/batch"), {
        method: 'post',
        body: JSON.stringify(members)
      });
    });

    _defineProperty(this, "joinTeam", async inviteId => {
      const query = (0, _helpers.buildQueryString)({
        invite_id: inviteId
      });
      return this.doFetch("".concat(this.getTeamsRoute(), "/members/invite").concat(query), {
        method: 'post'
      });
    });

    _defineProperty(this, "removeFromTeam", async (teamId, userId) => {
      this.trackEvent('api', 'api_teams_remove_members', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getTeamMemberRoute(teamId, userId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getTeamStats", async teamId => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/stats"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTotalUsersStats", async () => {
      return this.doFetch("".concat(this.getUsersRoute(), "/stats"), {
        method: 'get'
      });
    });

    _defineProperty(this, "invalidateAllEmailInvites", async () => {
      return this.doFetch("".concat(this.getTeamsRoute(), "/invites/email"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getTeamInviteInfo", async inviteId => {
      return this.doFetch("".concat(this.getTeamsRoute(), "/invite/").concat(inviteId), {
        method: 'get'
      });
    });

    _defineProperty(this, "updateTeamMemberRoles", async (teamId, userId, roles) => {
      this.trackEvent('api', 'api_teams_update_member_roles', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getTeamMemberRoute(teamId, userId), "/roles"), {
        method: 'put',
        body: JSON.stringify({
          roles
        })
      });
    });

    _defineProperty(this, "sendEmailInvitesToTeam", async (teamId, emails) => {
      this.trackEvent('api', 'api_teams_invite_members', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/invite/email"), {
        method: 'post',
        body: JSON.stringify(emails)
      });
    });

    _defineProperty(this, "sendEmailGuestInvitesToChannels", async (teamId, channelIds, emails, message) => {
      this.trackEvent('api', 'api_teams_invite_guests', {
        team_id: teamId,
        channel_ids: channelIds
      });
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/invite-guests/email"), {
        method: 'post',
        body: JSON.stringify({
          emails,
          channels: channelIds,
          message
        })
      });
    });

    _defineProperty(this, "importTeam", async (teamId, file, importFrom) => {
      const formData = new FormData();
      formData.append('file', file, file.name);
      formData.append('filesize', file.size);
      formData.append('importFrom', importFrom);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getTeamRoute(teamId), "/import"), request);
    });

    _defineProperty(this, "getTeamIconUrl", (teamId, lastTeamIconUpdate) => {
      const params = {};

      if (lastTeamIconUpdate) {
        params._ = lastTeamIconUpdate;
      }

      return "".concat(this.getTeamRoute(teamId), "/image").concat((0, _helpers.buildQueryString)(params));
    });

    _defineProperty(this, "setTeamIcon", async (teamId, imageData) => {
      this.trackEvent('api', 'api_team_set_team_icon');
      const formData = new FormData();
      formData.append('image', imageData);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getTeamRoute(teamId), "/image"), request);
    });

    _defineProperty(this, "removeTeamIcon", async teamId => {
      this.trackEvent('api', 'api_team_remove_team_icon');
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/image"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateTeamMemberSchemeRoles", async (teamId, userId, isSchemeUser, isSchemeAdmin) => {
      const body = {
        scheme_user: isSchemeUser,
        scheme_admin: isSchemeAdmin
      };
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/members/").concat(userId, "/schemeRoles"), {
        method: 'put',
        body: JSON.stringify(body)
      });
    });

    _defineProperty(this, "getAllChannels", async (page = 0, perPage = PER_PAGE_DEFAULT, notAssociatedToGroup = '', excludeDefaultChannels = false, includeTotalCount = false) => {
      const queryData = {
        page,
        per_page: perPage,
        not_associated_to_group: notAssociatedToGroup,
        exclude_default_channels: excludeDefaultChannels,
        include_total_count: includeTotalCount
      };
      return this.doFetch("".concat(this.getChannelsRoute()).concat((0, _helpers.buildQueryString)(queryData)), {
        method: 'get'
      });
    });

    _defineProperty(this, "createChannel", async channel => {
      this.trackEvent('api', 'api_channels_create', {
        team_id: channel.team_id
      });
      return this.doFetch("".concat(this.getChannelsRoute()), {
        method: 'post',
        body: JSON.stringify(channel)
      });
    });

    _defineProperty(this, "createDirectChannel", async userIds => {
      this.trackEvent('api', 'api_channels_create_direct');
      return this.doFetch("".concat(this.getChannelsRoute(), "/direct"), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "createGroupChannel", async userIds => {
      this.trackEvent('api', 'api_channels_create_group');
      return this.doFetch("".concat(this.getChannelsRoute(), "/group"), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "deleteChannel", async channelId => {
      this.trackEvent('api', 'api_channels_delete', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateChannel", async channel => {
      this.trackEvent('api', 'api_channels_update', {
        channel_id: channel.id
      });
      return this.doFetch("".concat(this.getChannelRoute(channel.id)), {
        method: 'put',
        body: JSON.stringify(channel)
      });
    });

    _defineProperty(this, "convertChannelToPrivate", async channelId => {
      this.trackEvent('api', 'api_channels_convert_to_private', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/convert"), {
        method: 'post'
      });
    });

    _defineProperty(this, "patchChannel", async (channelId, channelPatch) => {
      this.trackEvent('api', 'api_channels_patch', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/patch"), {
        method: 'put',
        body: JSON.stringify(channelPatch)
      });
    });

    _defineProperty(this, "updateChannelNotifyProps", async props => {
      this.trackEvent('api', 'api_users_update_channel_notifcations', {
        channel_id: props.channel_id
      });
      return this.doFetch("".concat(this.getChannelMemberRoute(props.channel_id, props.user_id), "/notify_props"), {
        method: 'put',
        body: JSON.stringify(props)
      });
    });

    _defineProperty(this, "updateChannelScheme", async (channelId, schemeId) => {
      const patch = {
        scheme_id: schemeId
      };
      this.trackEvent('api', 'api_channels_update_scheme', _objectSpread({
        channel_id: channelId
      }, patch));
      return this.doFetch("".concat(this.getChannelSchemeRoute(channelId)), {
        method: 'put',
        body: JSON.stringify(patch)
      });
    });

    _defineProperty(this, "getChannel", async channelId => {
      this.trackEvent('api', 'api_channel_get', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelByName", async (teamId, channelName, includeDeleted = false) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/channels/name/").concat(channelName, "?include_deleted=").concat(includeDeleted), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelByNameAndTeamName", async (teamName, channelName, includeDeleted = false) => {
      this.trackEvent('api', 'api_channel_get_by_name_and_teamName', {
        channel_name: channelName,
        team_name: teamName,
        include_deleted: includeDeleted
      });
      return this.doFetch("".concat(this.getTeamNameRoute(teamName), "/channels/name/").concat(channelName, "?include_deleted=").concat(includeDeleted), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannels", async (teamId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/channels").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyChannels", async teamId => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/teams/").concat(teamId, "/channels"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyChannelMember", async channelId => {
      return this.doFetch("".concat(this.getChannelMemberRoute(channelId, 'me')), {
        method: 'get'
      });
    });

    _defineProperty(this, "getMyChannelMembers", async teamId => {
      return this.doFetch("".concat(this.getUserRoute('me'), "/teams/").concat(teamId, "/channels/members"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelMembers", async (channelId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getChannelMembersRoute(channelId)).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelTimezones", async channelId => {
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/timezones"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelMember", async (channelId, userId) => {
      return this.doFetch("".concat(this.getChannelMemberRoute(channelId, userId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getChannelMembersByIds", async (channelId, userIds) => {
      return this.doFetch("".concat(this.getChannelMembersRoute(channelId), "/ids"), {
        method: 'post',
        body: JSON.stringify(userIds)
      });
    });

    _defineProperty(this, "addToChannel", async (userId, channelId, postRootId = '') => {
      this.trackEvent('api', 'api_channels_add_member', {
        channel_id: channelId
      });
      const member = {
        user_id: userId,
        channel_id: channelId,
        post_root_id: postRootId
      };
      return this.doFetch("".concat(this.getChannelMembersRoute(channelId)), {
        method: 'post',
        body: JSON.stringify(member)
      });
    });

    _defineProperty(this, "removeFromChannel", async (userId, channelId) => {
      this.trackEvent('api', 'api_channels_remove_member', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelMemberRoute(channelId, userId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateChannelMemberRoles", async (channelId, userId, roles) => {
      return this.doFetch("".concat(this.getChannelMemberRoute(channelId, userId), "/roles"), {
        method: 'put',
        body: JSON.stringify({
          roles
        })
      });
    });

    _defineProperty(this, "getChannelStats", async channelId => {
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/stats"), {
        method: 'get'
      });
    });

    _defineProperty(this, "viewMyChannel", async (channelId, prevChannelId) => {
      const data = {
        channel_id: channelId,
        prev_channel_id: prevChannelId
      };
      return this.doFetch("".concat(this.getChannelsRoute(), "/members/me/view"), {
        method: 'post',
        body: JSON.stringify(data)
      });
    });

    _defineProperty(this, "autocompleteChannels", async (teamId, name) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/channels/autocomplete").concat((0, _helpers.buildQueryString)({
        name
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "autocompleteChannelsForSearch", async (teamId, name) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/channels/search_autocomplete").concat((0, _helpers.buildQueryString)({
        name
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "searchChannels", async (teamId, term) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/channels/search"), {
        method: 'post',
        body: JSON.stringify({
          term
        })
      });
    });

    _defineProperty(this, "searchAllChannels", async (term, notAssociatedToGroup = '', excludeDefaultChannels = false) => {
      const body = {
        term,
        not_associated_to_group: notAssociatedToGroup,
        exclude_default_channels: excludeDefaultChannels
      };
      return this.doFetch("".concat(this.getChannelsRoute(), "/search"), {
        method: 'post',
        body: JSON.stringify(body)
      });
    });

    _defineProperty(this, "searchGroupChannels", async term => {
      return this.doFetch("".concat(this.getChannelsRoute(), "/group/search"), {
        method: 'post',
        body: JSON.stringify({
          term
        })
      });
    });

    _defineProperty(this, "updateChannelMemberSchemeRoles", async (channelId, userId, isSchemeUser, isSchemeAdmin) => {
      const body = {
        scheme_user: isSchemeUser,
        scheme_admin: isSchemeAdmin
      };
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/members/").concat(userId, "/schemeRoles"), {
        method: 'put',
        body: JSON.stringify(body)
      });
    });

    _defineProperty(this, "createPost", async post => {
      this.trackEvent('api', 'api_posts_create', {
        channel_id: post.channel_id
      });

      if (post.root_id != null && post.root_id !== '') {
        this.trackEvent('api', 'api_posts_replied', {
          channel_id: post.channel_id
        });
      }

      return this.doFetch("".concat(this.getPostsRoute()), {
        method: 'post',
        body: JSON.stringify(post)
      });
    });

    _defineProperty(this, "updatePost", async post => {
      this.trackEvent('api', 'api_posts_update', {
        channel_id: post.channel_id
      });
      return this.doFetch("".concat(this.getPostRoute(post.id)), {
        method: 'put',
        body: JSON.stringify(post)
      });
    });

    _defineProperty(this, "getPost", async postId => {
      return this.doFetch("".concat(this.getPostRoute(postId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "patchPost", async postPatch => {
      this.trackEvent('api', 'api_posts_patch', {
        channel_id: postPatch.channel_id
      });
      return this.doFetch("".concat(this.getPostRoute(postPatch.id), "/patch"), {
        method: 'put',
        body: JSON.stringify(postPatch)
      });
    });

    _defineProperty(this, "deletePost", async postId => {
      this.trackEvent('api', 'api_posts_delete');
      return this.doFetch("".concat(this.getPostRoute(postId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getPostThread", async postId => {
      return this.doFetch("".concat(this.getPostRoute(postId), "/thread"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPosts", async (channelId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/posts").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPostsUnread", async (channelId, userId, limitAfter = 30, limitBefore = 30) => {
      return this.doFetch("".concat(this.getUserRoute(userId), "/channels/").concat(channelId, "/posts/unread").concat((0, _helpers.buildQueryString)({
        limit_after: limitAfter,
        limit_before: limitBefore
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPostsSince", async (channelId, since) => {
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/posts").concat((0, _helpers.buildQueryString)({
        since
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPostsBefore", async (channelId, postId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_posts_get_before', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/posts").concat((0, _helpers.buildQueryString)({
        before: postId,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPostsAfter", async (channelId, postId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_posts_get_after', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/posts").concat((0, _helpers.buildQueryString)({
        after: postId,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getFileInfosForPost", async postId => {
      return this.doFetch("".concat(this.getPostRoute(postId), "/files/info"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getFlaggedPosts", async (userId, channelId = '', teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_posts_get_flagged', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getUserRoute(userId), "/posts/flagged").concat((0, _helpers.buildQueryString)({
        channel_id: channelId,
        team_id: teamId,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPinnedPosts", async channelId => {
      this.trackEvent('api', 'api_posts_get_pinned', {
        channel_id: channelId
      });
      return this.doFetch("".concat(this.getChannelRoute(channelId), "/pinned"), {
        method: 'get'
      });
    });

    _defineProperty(this, "pinPost", async postId => {
      this.trackEvent('api', 'api_posts_pin');
      return this.doFetch("".concat(this.getPostRoute(postId), "/pin"), {
        method: 'post'
      });
    });

    _defineProperty(this, "unpinPost", async postId => {
      this.trackEvent('api', 'api_posts_unpin');
      return this.doFetch("".concat(this.getPostRoute(postId), "/unpin"), {
        method: 'post'
      });
    });

    _defineProperty(this, "addReaction", async (userId, postId, emojiName) => {
      this.trackEvent('api', 'api_reactions_save', {
        post_id: postId
      });
      return this.doFetch("".concat(this.getReactionsRoute()), {
        method: 'post',
        body: JSON.stringify({
          user_id: userId,
          post_id: postId,
          emoji_name: emojiName
        })
      });
    });

    _defineProperty(this, "removeReaction", async (userId, postId, emojiName) => {
      this.trackEvent('api', 'api_reactions_delete', {
        post_id: postId
      });
      return this.doFetch("".concat(this.getUserRoute(userId), "/posts/").concat(postId, "/reactions/").concat(emojiName), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getReactionsForPost", async postId => {
      return this.doFetch("".concat(this.getPostRoute(postId), "/reactions"), {
        method: 'get'
      });
    });

    _defineProperty(this, "searchPostsWithParams", async (teamId, params) => {
      this.trackEvent('api', 'api_posts_search', {
        team_id: teamId
      });
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/posts/search"), {
        method: 'post',
        body: JSON.stringify(params)
      });
    });

    _defineProperty(this, "searchPosts", async (teamId, terms, isOrSearch) => {
      return this.searchPostsWithParams(teamId, {
        terms,
        is_or_search: isOrSearch
      });
    });

    _defineProperty(this, "getOpenGraphMetadata", async url => {
      return this.doFetch("".concat(this.getBaseRoute(), "/opengraph"), {
        method: 'post',
        body: JSON.stringify({
          url
        })
      });
    });

    _defineProperty(this, "doPostAction", async (postId, actionId, selectedOption = '') => {
      return this.doPostActionWithCookie(postId, actionId, '', selectedOption);
    });

    _defineProperty(this, "doPostActionWithCookie", async (postId, actionId, actionCookie, selectedOption = '') => {
      if (selectedOption) {
        this.trackEvent('api', 'api_interactive_messages_menu_selected');
      } else {
        this.trackEvent('api', 'api_interactive_messages_button_clicked');
      }

      const msg = {
        selected_option: selectedOption
      };

      if (actionCookie !== '') {
        msg.cookie = actionCookie;
      }

      return this.doFetch("".concat(this.getPostRoute(postId), "/actions/").concat(encodeURIComponent(actionId)), {
        method: 'post',
        body: JSON.stringify(msg)
      });
    });

    _defineProperty(this, "uploadFile", async (fileFormData, formBoundary) => {
      this.trackEvent('api', 'api_files_upload');
      const request = {
        method: 'post',
        body: fileFormData
      };

      if (formBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formBoundary)
        };
      }

      return this.doFetch("".concat(this.getFilesRoute()), request);
    });

    _defineProperty(this, "getFilePublicLink", async fileId => {
      return this.doFetch("".concat(this.getFileRoute(fileId), "/link"), {
        method: 'get'
      });
    });

    _defineProperty(this, "savePreferences", async (userId, preferences) => {
      return this.doFetch("".concat(this.getPreferencesRoute(userId)), {
        method: 'put',
        body: JSON.stringify(preferences)
      });
    });

    _defineProperty(this, "getMyPreferences", async () => {
      return this.doFetch("".concat(this.getPreferencesRoute('me')), {
        method: 'get'
      });
    });

    _defineProperty(this, "deletePreferences", async (userId, preferences) => {
      return this.doFetch("".concat(this.getPreferencesRoute(userId), "/delete"), {
        method: 'post',
        body: JSON.stringify(preferences)
      });
    });

    _defineProperty(this, "ping", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/system/ping?time=").concat(Date.now()), {
        method: 'get'
      });
    });

    _defineProperty(this, "logClientError", async (message, level = 'ERROR') => {
      const url = "".concat(this.getBaseRoute(), "/logs");

      if (!this.enableLogging) {
        throw new ClientError(this.getUrl(), {
          message: 'Logging disabled.',
          url
        });
      }

      return this.doFetch(url, {
        method: 'post',
        body: JSON.stringify({
          message,
          level
        })
      });
    });

    _defineProperty(this, "getClientConfigOld", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/config/client?format=old"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getClientLicenseOld", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/license/client?format=old"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTranslations", async url => {
      return this.doFetch(url, {
        method: 'get'
      });
    });

    _defineProperty(this, "getWebSocketUrl", () => {
      return "".concat(this.getBaseRoute(), "/websocket");
    });

    _defineProperty(this, "webrtcToken", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/webrtc/token"), {
        method: 'get'
      });
    });

    _defineProperty(this, "createIncomingWebhook", async hook => {
      this.trackEvent('api', 'api_integrations_created', {
        team_id: hook.team_id
      });
      return this.doFetch("".concat(this.getIncomingHooksRoute()), {
        method: 'post',
        body: JSON.stringify(hook)
      });
    });

    _defineProperty(this, "getIncomingWebhook", async hookId => {
      return this.doFetch("".concat(this.getIncomingHookRoute(hookId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getIncomingWebhooks", async (teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      const queryParams = {
        page,
        per_page: perPage
      };

      if (teamId) {
        queryParams.team_id = teamId;
      }

      return this.doFetch("".concat(this.getIncomingHooksRoute()).concat((0, _helpers.buildQueryString)(queryParams)), {
        method: 'get'
      });
    });

    _defineProperty(this, "removeIncomingWebhook", async hookId => {
      this.trackEvent('api', 'api_integrations_deleted');
      return this.doFetch("".concat(this.getIncomingHookRoute(hookId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateIncomingWebhook", async hook => {
      this.trackEvent('api', 'api_integrations_updated', {
        team_id: hook.team_id
      });
      return this.doFetch("".concat(this.getIncomingHookRoute(hook.id)), {
        method: 'put',
        body: JSON.stringify(hook)
      });
    });

    _defineProperty(this, "createOutgoingWebhook", async hook => {
      this.trackEvent('api', 'api_integrations_created', {
        team_id: hook.team_id
      });
      return this.doFetch("".concat(this.getOutgoingHooksRoute()), {
        method: 'post',
        body: JSON.stringify(hook)
      });
    });

    _defineProperty(this, "getOutgoingWebhook", async hookId => {
      return this.doFetch("".concat(this.getOutgoingHookRoute(hookId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getOutgoingWebhooks", async (channelId = '', teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      const queryParams = {
        page,
        per_page: perPage
      };

      if (channelId) {
        queryParams.channel_id = channelId;
      }

      if (teamId) {
        queryParams.team_id = teamId;
      }

      return this.doFetch("".concat(this.getOutgoingHooksRoute()).concat((0, _helpers.buildQueryString)(queryParams)), {
        method: 'get'
      });
    });

    _defineProperty(this, "removeOutgoingWebhook", async hookId => {
      this.trackEvent('api', 'api_integrations_deleted');
      return this.doFetch("".concat(this.getOutgoingHookRoute(hookId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "updateOutgoingWebhook", async hook => {
      this.trackEvent('api', 'api_integrations_updated', {
        team_id: hook.team_id
      });
      return this.doFetch("".concat(this.getOutgoingHookRoute(hook.id)), {
        method: 'put',
        body: JSON.stringify(hook)
      });
    });

    _defineProperty(this, "regenOutgoingHookToken", async id => {
      return this.doFetch("".concat(this.getOutgoingHookRoute(id), "/regen_token"), {
        method: 'post'
      });
    });

    _defineProperty(this, "getCommandsList", async teamId => {
      return this.doFetch("".concat(this.getCommandsRoute(), "?team_id=").concat(teamId), {
        method: 'get'
      });
    });

    _defineProperty(this, "getAutocompleteCommandsList", async (teamId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getTeamRoute(teamId), "/commands/autocomplete").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getCustomTeamCommands", async teamId => {
      return this.doFetch("".concat(this.getCommandsRoute(), "?team_id=").concat(teamId, "&custom_only=true"), {
        method: 'get'
      });
    });

    _defineProperty(this, "executeCommand", async (command, commandArgs = {}) => {
      this.trackEvent('api', 'api_integrations_used');
      return this.doFetch("".concat(this.getCommandsRoute(), "/execute"), {
        method: 'post',
        body: JSON.stringify(_objectSpread({
          command
        }, commandArgs))
      });
    });

    _defineProperty(this, "addCommand", async command => {
      this.trackEvent('api', 'api_integrations_created');
      return this.doFetch("".concat(this.getCommandsRoute()), {
        method: 'post',
        body: JSON.stringify(command)
      });
    });

    _defineProperty(this, "editCommand", async command => {
      this.trackEvent('api', 'api_integrations_created');
      return this.doFetch("".concat(this.getCommandsRoute(), "/").concat(command.id), {
        method: 'put',
        body: JSON.stringify(command)
      });
    });

    _defineProperty(this, "regenCommandToken", async id => {
      return this.doFetch("".concat(this.getCommandsRoute(), "/").concat(id, "/regen_token"), {
        method: 'put'
      });
    });

    _defineProperty(this, "deleteCommand", async id => {
      this.trackEvent('api', 'api_integrations_deleted');
      return this.doFetch("".concat(this.getCommandsRoute(), "/").concat(id), {
        method: 'delete'
      });
    });

    _defineProperty(this, "createOAuthApp", async app => {
      this.trackEvent('api', 'api_apps_register');
      return this.doFetch("".concat(this.getOAuthAppsRoute()), {
        method: 'post',
        body: JSON.stringify(app)
      });
    });

    _defineProperty(this, "editOAuthApp", async app => {
      return this.doFetch("".concat(this.getOAuthAppsRoute(), "/").concat(app.id), {
        method: 'put',
        body: JSON.stringify(app)
      });
    });

    _defineProperty(this, "getOAuthApps", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getOAuthAppsRoute()).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getOAuthApp", async appId => {
      return this.doFetch("".concat(this.getOAuthAppRoute(appId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getOAuthAppInfo", async appId => {
      return this.doFetch("".concat(this.getOAuthAppRoute(appId), "/info"), {
        method: 'get'
      });
    });

    _defineProperty(this, "deleteOAuthApp", async appId => {
      this.trackEvent('api', 'api_apps_delete');
      return this.doFetch("".concat(this.getOAuthAppRoute(appId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "regenOAuthAppSecret", async appId => {
      return this.doFetch("".concat(this.getOAuthAppRoute(appId), "/regen_secret"), {
        method: 'post'
      });
    });

    _defineProperty(this, "submitInteractiveDialog", async data => {
      this.trackEvent('api', 'api_interactive_messages_dialog_submitted');
      return this.doFetch("".concat(this.getBaseRoute(), "/actions/dialogs/submit"), {
        method: 'post',
        body: JSON.stringify(data)
      });
    });

    _defineProperty(this, "createCustomEmoji", async (emoji, imageData) => {
      this.trackEvent('api', 'api_emoji_custom_add');
      const formData = new FormData();
      formData.append('image', imageData);
      formData.append('emoji', JSON.stringify(emoji));
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getEmojisRoute()), request);
    });

    _defineProperty(this, "getCustomEmoji", async id => {
      return this.doFetch("".concat(this.getEmojisRoute(), "/").concat(id), {
        method: 'get'
      });
    });

    _defineProperty(this, "getCustomEmojiByName", async name => {
      return this.doFetch("".concat(this.getEmojisRoute(), "/name/").concat(name), {
        method: 'get'
      });
    });

    _defineProperty(this, "getCustomEmojis", async (page = 0, perPage = PER_PAGE_DEFAULT, sort = '') => {
      return this.doFetch("".concat(this.getEmojisRoute()).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage,
        sort
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "deleteCustomEmoji", async emojiId => {
      this.trackEvent('api', 'api_emoji_custom_delete');
      return this.doFetch("".concat(this.getEmojiRoute(emojiId)), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getSystemEmojiImageUrl", filename => {
      return "".concat(this.url, "/static/emoji/").concat(filename, ".png");
    });

    _defineProperty(this, "getCustomEmojiImageUrl", id => {
      return "".concat(this.getEmojiRoute(id), "/image");
    });

    _defineProperty(this, "searchCustomEmoji", async (term, options = {}) => {
      return this.doFetch("".concat(this.getEmojisRoute(), "/search"), {
        method: 'post',
        body: JSON.stringify(_objectSpread({
          term
        }, options))
      });
    });

    _defineProperty(this, "autocompleteCustomEmoji", async name => {
      return this.doFetch("".concat(this.getEmojisRoute(), "/autocomplete").concat((0, _helpers.buildQueryString)({
        name
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getTimezones", async () => {
      return this.doFetch("".concat(this.getTimezonesRoute()), {
        method: 'get'
      });
    });

    _defineProperty(this, "getDataRetentionPolicy", () => {
      return this.doFetch("".concat(this.getDataRetentionRoute(), "/policy"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getJob", async id => {
      return this.doFetch("".concat(this.getJobsRoute(), "/").concat(id), {
        method: 'get'
      });
    });

    _defineProperty(this, "getJobs", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getJobsRoute()).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getJobsByType", async (type, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getJobsRoute(), "/type/").concat(type).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "createJob", async job => {
      return this.doFetch("".concat(this.getJobsRoute()), {
        method: 'post',
        body: JSON.stringify(job)
      });
    });

    _defineProperty(this, "cancelJob", async id => {
      return this.doFetch("".concat(this.getJobsRoute(), "/").concat(id, "/cancel"), {
        method: 'post'
      });
    });

    _defineProperty(this, "getLogs", async (page = 0, perPage = LOGS_PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/logs").concat((0, _helpers.buildQueryString)({
        page,
        logs_per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getAudits", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/audits").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getConfig", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/config"), {
        method: 'get'
      });
    });

    _defineProperty(this, "updateConfig", async config => {
      return this.doFetch("".concat(this.getBaseRoute(), "/config"), {
        method: 'put',
        body: JSON.stringify(config)
      });
    });

    _defineProperty(this, "reloadConfig", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/config/reload"), {
        method: 'post'
      });
    });

    _defineProperty(this, "getEnvironmentConfig", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/config/environment"), {
        method: 'get'
      });
    });

    _defineProperty(this, "testEmail", async config => {
      return this.doFetch("".concat(this.getBaseRoute(), "/email/test"), {
        method: 'post',
        body: JSON.stringify(config)
      });
    });

    _defineProperty(this, "testS3Connection", async config => {
      return this.doFetch("".concat(this.getBaseRoute(), "/file/s3_test"), {
        method: 'post',
        body: JSON.stringify(config)
      });
    });

    _defineProperty(this, "invalidateCaches", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/caches/invalidate"), {
        method: 'post'
      });
    });

    _defineProperty(this, "recycleDatabase", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/database/recycle"), {
        method: 'post'
      });
    });

    _defineProperty(this, "createComplianceReport", async job => {
      return this.doFetch("".concat(this.getBaseRoute(), "/compliance/reports"), {
        method: 'post',
        body: JSON.stringify(job)
      });
    });

    _defineProperty(this, "getComplianceReport", async reportId => {
      return this.doFetch("".concat(this.getBaseRoute(), "/compliance/reports/").concat(reportId), {
        method: 'get'
      });
    });

    _defineProperty(this, "getComplianceReports", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/compliance/reports").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "uploadBrandImage", async imageData => {
      const formData = new FormData();
      formData.append('image', imageData);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getBrandRoute(), "/image"), request);
    });

    _defineProperty(this, "deleteBrandImage", async () => {
      return this.doFetch("".concat(this.getBrandRoute(), "/image"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getClusterStatus", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/cluster/status"), {
        method: 'get'
      });
    });

    _defineProperty(this, "testLdap", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/ldap/test"), {
        method: 'post'
      });
    });

    _defineProperty(this, "syncLdap", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/ldap/sync"), {
        method: 'post'
      });
    });

    _defineProperty(this, "getLdapGroups", async (page = 0, perPage = PER_PAGE_DEFAULT, opts = {}) => {
      const query = _objectSpread({
        page,
        per_page: perPage
      }, opts);

      return this.doFetch("".concat(this.getBaseRoute(), "/ldap/groups").concat((0, _helpers.buildQueryString)(query)), {
        method: 'get'
      });
    });

    _defineProperty(this, "linkLdapGroup", async key => {
      return this.doFetch("".concat(this.getBaseRoute(), "/ldap/groups/").concat(encodeURI(key), "/link"), {
        method: 'post'
      });
    });

    _defineProperty(this, "unlinkLdapGroup", async key => {
      return this.doFetch("".concat(this.getBaseRoute(), "/ldap/groups/").concat(encodeURI(key), "/link"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getSamlCertificateStatus", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/status"), {
        method: 'get'
      });
    });

    _defineProperty(this, "uploadPublicSamlCertificate", async fileData => {
      const formData = new FormData();
      formData.append('certificate', fileData);
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/public"), {
        method: 'post',
        body: formData
      });
    });

    _defineProperty(this, "uploadPrivateSamlCertificate", async fileData => {
      const formData = new FormData();
      formData.append('certificate', fileData);
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/private"), {
        method: 'post',
        body: formData
      });
    });

    _defineProperty(this, "uploadIdpSamlCertificate", async fileData => {
      const formData = new FormData();
      formData.append('certificate', fileData);
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/idp"), {
        method: 'post',
        body: formData
      });
    });

    _defineProperty(this, "deletePublicSamlCertificate", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/public"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "deletePrivateSamlCertificate", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/private"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "deleteIdpSamlCertificate", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/saml/certificate/idp"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "testElasticsearch", async config => {
      return this.doFetch("".concat(this.getBaseRoute(), "/elasticsearch/test"), {
        method: 'post',
        body: JSON.stringify(config)
      });
    });

    _defineProperty(this, "purgeElasticsearchIndexes", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/elasticsearch/purge_indexes"), {
        method: 'post'
      });
    });

    _defineProperty(this, "uploadLicense", async fileData => {
      this.trackEvent('api', 'api_license_upload');
      const formData = new FormData();
      formData.append('license', fileData);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch("".concat(this.getBaseRoute(), "/license"), request);
    });

    _defineProperty(this, "removeLicense", async () => {
      return this.doFetch("".concat(this.getBaseRoute(), "/license"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getAnalytics", async (name = 'standard', teamId = '') => {
      return this.doFetch("".concat(this.getBaseRoute(), "/analytics/old").concat((0, _helpers.buildQueryString)({
        name,
        team_id: teamId
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getRole", async roleId => {
      return this.doFetch("".concat(this.getRolesRoute(), "/").concat(roleId), {
        method: 'get'
      });
    });

    _defineProperty(this, "getRoleByName", async roleName => {
      return this.doFetch("".concat(this.getRolesRoute(), "/name/").concat(roleName), {
        method: 'get'
      });
    });

    _defineProperty(this, "getRolesByNames", async rolesNames => {
      return this.doFetch("".concat(this.getRolesRoute(), "/names"), {
        method: 'post',
        body: JSON.stringify(rolesNames)
      });
    });

    _defineProperty(this, "patchRole", async (roleId, rolePatch) => {
      return this.doFetch("".concat(this.getRolesRoute(), "/").concat(roleId, "/patch"), {
        method: 'put',
        body: JSON.stringify(rolePatch)
      });
    });

    _defineProperty(this, "getSchemes", async (scope = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getSchemesRoute()).concat((0, _helpers.buildQueryString)({
        scope,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "createScheme", async scheme => {
      this.trackEvent('api', 'api_schemes_create');
      return this.doFetch("".concat(this.getSchemesRoute()), {
        method: 'post',
        body: JSON.stringify(scheme)
      });
    });

    _defineProperty(this, "getScheme", async schemeId => {
      return this.doFetch("".concat(this.getSchemesRoute(), "/").concat(schemeId), {
        method: 'get'
      });
    });

    _defineProperty(this, "deleteScheme", async schemeId => {
      this.trackEvent('api', 'api_schemes_delete');
      return this.doFetch("".concat(this.getSchemesRoute(), "/").concat(schemeId), {
        method: 'delete'
      });
    });

    _defineProperty(this, "patchScheme", async (schemeId, schemePatch) => {
      this.trackEvent('api', 'api_schemes_patch', {
        scheme_id: schemeId
      });
      return this.doFetch("".concat(this.getSchemesRoute(), "/").concat(schemeId, "/patch"), {
        method: 'put',
        body: JSON.stringify(schemePatch)
      });
    });

    _defineProperty(this, "getSchemeTeams", async (schemeId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getSchemesRoute(), "/").concat(schemeId, "/teams").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getSchemeChannels", async (schemeId, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getSchemesRoute(), "/").concat(schemeId, "/channels").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "uploadPlugin", async (fileData, force = false) => {
      this.trackEvent('api', 'api_plugin_upload');
      const formData = new FormData();

      if (force) {
        formData.append('force', 'true');
      }

      formData.append('plugin', fileData);
      const request = {
        method: 'post',
        body: formData
      };

      if (formData.getBoundary) {
        request.headers = {
          'Content-Type': "multipart/form-data; boundary=".concat(formData.getBoundary())
        };
      }

      return this.doFetch(this.getPluginsRoute(), request);
    });

    _defineProperty(this, "installPluginFromUrl", async (pluginDownloadUrl, force = false) => {
      this.trackEvent('api', 'api_install_plugin');
      const queryParams = {
        plugin_download_url: pluginDownloadUrl,
        force
      };
      return this.doFetch("".concat(this.getPluginsRoute(), "/install_from_url").concat((0, _helpers.buildQueryString)(queryParams)), {
        method: 'post'
      });
    });

    _defineProperty(this, "getPlugins", async () => {
      return this.doFetch(this.getPluginsRoute(), {
        method: 'get'
      });
    });

    _defineProperty(this, "getPluginStatuses", async () => {
      return this.doFetch("".concat(this.getPluginsRoute(), "/statuses"), {
        method: 'get'
      });
    });

    _defineProperty(this, "removePlugin", async pluginId => {
      return this.doFetch(this.getPluginRoute(pluginId), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getWebappPlugins", async () => {
      return this.doFetch("".concat(this.getPluginsRoute(), "/webapp"), {
        method: 'get'
      });
    });

    _defineProperty(this, "enablePlugin", async pluginId => {
      return this.doFetch("".concat(this.getPluginRoute(pluginId), "/enable"), {
        method: 'post'
      });
    });

    _defineProperty(this, "disablePlugin", async pluginId => {
      return this.doFetch("".concat(this.getPluginRoute(pluginId), "/disable"), {
        method: 'post'
      });
    });

    _defineProperty(this, "linkGroupSyncable", async (groupID, syncableID, syncableType, patch) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/groups/").concat(groupID, "/").concat(syncableType, "s/").concat(syncableID, "/link"), {
        method: 'post',
        body: JSON.stringify(patch)
      });
    });

    _defineProperty(this, "unlinkGroupSyncable", async (groupID, syncableID, syncableType) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/groups/").concat(groupID, "/").concat(syncableType, "s/").concat(syncableID, "/link"), {
        method: 'delete'
      });
    });

    _defineProperty(this, "getGroupSyncables", async (groupID, syncableType) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/groups/").concat(groupID, "/").concat(syncableType, "s"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroupMembers", async (groupID, page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBaseRoute(), "/groups/").concat(groupID, "/members").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroup", async groupID => {
      return this.doFetch("".concat(this.getBaseRoute(), "/groups/").concat(groupID), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroupsNotAssociatedToTeam", async (teamID, q = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_groups_get_not_associated_to_team', {
        team_id: teamID
      });
      return this.doFetch("".concat(this.getBaseRoute(), "/groups").concat((0, _helpers.buildQueryString)({
        not_associated_to_team: teamID,
        page,
        per_page: perPage,
        q,
        include_member_count: true
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroupsNotAssociatedToChannel", async (channelID, q = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_groups_get_not_associated_to_channel', {
        channel_id: channelID
      });
      return this.doFetch("".concat(this.getBaseRoute(), "/groups").concat((0, _helpers.buildQueryString)({
        not_associated_to_channel: channelID,
        page,
        per_page: perPage,
        q,
        include_member_count: true
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroupsAssociatedToTeam", async (teamID, q = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_groups_get_associated_to_team', {
        team_id: teamID
      });
      return this.doFetch("".concat(this.getBaseRoute(), "/teams/").concat(teamID, "/groups").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage,
        q,
        include_member_count: true
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getGroupsAssociatedToChannel", async (channelID, q = '', page = 0, perPage = PER_PAGE_DEFAULT) => {
      this.trackEvent('api', 'api_groups_get_associated_to_channel', {
        channel_id: channelID
      });
      return this.doFetch("".concat(this.getBaseRoute(), "/channels/").concat(channelID, "/groups").concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage,
        q,
        include_member_count: true
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getAllGroupsAssociatedToTeam", async teamID => {
      return this.doFetch("".concat(this.getBaseRoute(), "/teams/").concat(teamID, "/groups?paginate=false"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getAllGroupsAssociatedToChannel", async channelID => {
      return this.doFetch("".concat(this.getBaseRoute(), "/channels/").concat(channelID, "/groups?paginate=false"), {
        method: 'get'
      });
    });

    _defineProperty(this, "getRedirectLocation", async urlParam => {
      if (!urlParam.length) {
        return Promise.resolve();
      }

      const url = "".concat(this.getRedirectLocationRoute()).concat((0, _helpers.buildQueryString)({
        url: urlParam
      }));
      return this.doFetch(url, {
        method: 'get'
      });
    });

    _defineProperty(this, "createBot", async bot => {
      return this.doFetch("".concat(this.getBotsRoute()), {
        method: 'post',
        body: JSON.stringify(bot)
      });
    });

    _defineProperty(this, "patchBot", async (botUserId, botPatch) => {
      return this.doFetch("".concat(this.getBotRoute(botUserId)), {
        method: 'put',
        body: JSON.stringify(botPatch)
      });
    });

    _defineProperty(this, "getBot", async botUserId => {
      return this.doFetch("".concat(this.getBotRoute(botUserId)), {
        method: 'get'
      });
    });

    _defineProperty(this, "getBots", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBotsRoute()).concat((0, _helpers.buildQueryString)({
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getBotsIncludeDeleted", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBotsRoute()).concat((0, _helpers.buildQueryString)({
        include_deleted: true,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "getBotsOrphaned", async (page = 0, perPage = PER_PAGE_DEFAULT) => {
      return this.doFetch("".concat(this.getBotsRoute()).concat((0, _helpers.buildQueryString)({
        only_orphaned: true,
        page,
        per_page: perPage
      })), {
        method: 'get'
      });
    });

    _defineProperty(this, "disableBot", async botUserId => {
      return this.doFetch("".concat(this.getBotRoute(botUserId), "/disable"), {
        method: 'post'
      });
    });

    _defineProperty(this, "enableBot", async botUserId => {
      return this.doFetch("".concat(this.getBotRoute(botUserId), "/enable"), {
        method: 'post'
      });
    });

    _defineProperty(this, "assignBot", async (botUserId, newOwnerId) => {
      return this.doFetch("".concat(this.getBotRoute(botUserId), "/assign/").concat(newOwnerId), {
        method: 'post'
      });
    });

    _defineProperty(this, "teamMembersMinusGroupMembers", async (teamID, groupIDs, page, perPage) => {
      const query = "group_ids=".concat(groupIDs.join(','), "&page=").concat(page, "&per_page=").concat(perPage);
      return this.doFetch("".concat(this.getTeamRoute(teamID), "/members_minus_group_members?").concat(query), {
        method: 'get'
      });
    });

    _defineProperty(this, "channelMembersMinusGroupMembers", async (channelID, groupIDs, page, perPage) => {
      const query = "group_ids=".concat(groupIDs.join(','), "&page=").concat(page, "&per_page=").concat(perPage);
      return this.doFetch("".concat(this.getChannelRoute(channelID), "/members_minus_group_members?").concat(query), {
        method: 'get'
      });
    });

    _defineProperty(this, "doFetch", async (url, options) => {
      const {
        data
      } = await this.doFetchWithResponse(url, options);
      return data;
    });

    _defineProperty(this, "doFetchWithResponse", async (url, options) => {
      const response = await (0, _fetch_etag.default)(url, this.getOptions(options));
      const headers = parseAndMergeNestedHeaders(response.headers);
      let data;

      try {
        data = await response.json();
      } catch (err) {
        throw new ClientError(this.getUrl(), {
          message: 'Received invalid response from the server.',
          intl: {
            id: 'mobile.request.invalid_response',
            defaultMessage: 'Received invalid response from the server.'
          },
          url
        });
      }

      if (headers.has(HEADER_X_VERSION_ID) && !headers.get('Cache-Control')) {
        const serverVersion = headers.get(HEADER_X_VERSION_ID);

        if (serverVersion && this.serverVersion !== serverVersion) {
          this.serverVersion = serverVersion;
        }
      }

      if (headers.has(HEADER_X_CLUSTER_ID)) {
        const clusterId = headers.get(HEADER_X_CLUSTER_ID);

        if (clusterId && this.clusterId !== clusterId) {
          this.clusterId = clusterId;
        }
      }

      if (response.ok) {
        return {
          response,
          headers,
          data
        };
      }

      const msg = data.message || '';

      if (this.logToConsole) {
        console.error(msg); // eslint-disable-line no-console
      }

      throw new ClientError(this.getUrl(), {
        message: msg,
        server_error_id: data.id,
        status_code: data.status_code,
        url
      });
    });

    this.logToConsole = false;
    this.serverVersion = '';
    this.clusterId = '';
    this.token = '';
    this.csrf = '';
    this.url = '';
    this.urlVersion = '/api/v4';
    this.userAgent = null;
    this.enableLogging = false;
    this.defaultHeaders = {};
    this.userId = '';
    this.diagnosticId = '';
    this.includeCookies = true;
    this.translations = {
      connectionError: 'There appears to be a problem with your internet connection.',
      unknownError: 'We received an unexpected status code from the server.'
    };
  }

  getUrl() {
    return this.url;
  }

  getAbsoluteUrl(baseUrl) {
    if (typeof baseUrl !== 'string' || !baseUrl.startsWith('/')) {
      return baseUrl;
    }

    return this.getUrl() + baseUrl;
  }

  setUrl(url) {
    this.url = url;
  }

  setUserAgent(userAgent) {
    this.userAgent = userAgent;
  }

  getToken() {
    return this.token;
  }

  setToken(token) {
    this.token = token;
  }

  setCSRF(csrfToken) {
    this.csrf = csrfToken;
  }

  setAcceptLanguage(locale) {
    this.defaultHeaders['Accept-Language'] = locale;
  }

  setEnableLogging(enable) {
    this.enableLogging = enable;
  }

  setIncludeCookies(include) {
    this.includeCookies = include;
  }

  setUserId(userId) {
    this.userId = userId;
  }

  setUserRoles(roles) {
    this.userRoles = roles;
  }

  setDiagnosticId(diagnosticId) {
    this.diagnosticId = diagnosticId;
  }

  getServerVersion() {
    return this.serverVersion;
  }

  getUrlVersion() {
    return this.urlVersion;
  }

  getBaseRoute() {
    return "".concat(this.url).concat(this.urlVersion);
  }

  getUsersRoute() {
    return "".concat(this.getBaseRoute(), "/users");
  }

  getUserRoute(userId) {
    return "".concat(this.getUsersRoute(), "/").concat(userId);
  }

  getTeamsRoute() {
    return "".concat(this.getBaseRoute(), "/teams");
  }

  getTeamRoute(teamId) {
    return "".concat(this.getTeamsRoute(), "/").concat(teamId);
  }

  getTeamSchemeRoute(teamId) {
    return "".concat(this.getTeamRoute(teamId), "/scheme");
  }

  getTeamNameRoute(teamName) {
    return "".concat(this.getTeamsRoute(), "/name/").concat(teamName);
  }

  getTeamMembersRoute(teamId) {
    return "".concat(this.getTeamRoute(teamId), "/members");
  }

  getTeamMemberRoute(teamId, userId) {
    return "".concat(this.getTeamMembersRoute(teamId), "/").concat(userId);
  }

  getChannelsRoute() {
    return "".concat(this.getBaseRoute(), "/channels");
  }

  getChannelRoute(channelId) {
    return "".concat(this.getChannelsRoute(), "/").concat(channelId);
  }

  getChannelMembersRoute(channelId) {
    return "".concat(this.getChannelRoute(channelId), "/members");
  }

  getChannelMemberRoute(channelId, userId) {
    return "".concat(this.getChannelMembersRoute(channelId), "/").concat(userId);
  }

  getChannelSchemeRoute(channelId) {
    return "".concat(this.getChannelRoute(channelId), "/scheme");
  }

  getPostsRoute() {
    return "".concat(this.getBaseRoute(), "/posts");
  }

  getPostRoute(postId) {
    return "".concat(this.getPostsRoute(), "/").concat(postId);
  }

  getReactionsRoute() {
    return "".concat(this.getBaseRoute(), "/reactions");
  }

  getCommandsRoute() {
    return "".concat(this.getBaseRoute(), "/commands");
  }

  getFilesRoute() {
    return "".concat(this.getBaseRoute(), "/files");
  }

  getFileRoute(fileId) {
    return "".concat(this.getFilesRoute(), "/").concat(fileId);
  }

  getPreferencesRoute(userId) {
    return "".concat(this.getUserRoute(userId), "/preferences");
  }

  getIncomingHooksRoute() {
    return "".concat(this.getBaseRoute(), "/hooks/incoming");
  }

  getIncomingHookRoute(hookId) {
    return "".concat(this.getBaseRoute(), "/hooks/incoming/").concat(hookId);
  }

  getOutgoingHooksRoute() {
    return "".concat(this.getBaseRoute(), "/hooks/outgoing");
  }

  getOutgoingHookRoute(hookId) {
    return "".concat(this.getBaseRoute(), "/hooks/outgoing/").concat(hookId);
  }

  getOAuthRoute() {
    return "".concat(this.url, "/oauth");
  }

  getOAuthAppsRoute() {
    return "".concat(this.getBaseRoute(), "/oauth/apps");
  }

  getOAuthAppRoute(appId) {
    return "".concat(this.getOAuthAppsRoute(), "/").concat(appId);
  }

  getEmojisRoute() {
    return "".concat(this.getBaseRoute(), "/emoji");
  }

  getEmojiRoute(emojiId) {
    return "".concat(this.getEmojisRoute(), "/").concat(emojiId);
  }

  getBrandRoute() {
    return "".concat(this.getBaseRoute(), "/brand");
  }

  getBrandImageUrl(timestamp) {
    return "".concat(this.getBrandRoute(), "/image?t=").concat(timestamp);
  }

  getDataRetentionRoute() {
    return "".concat(this.getBaseRoute(), "/data_retention");
  }

  getJobsRoute() {
    return "".concat(this.getBaseRoute(), "/jobs");
  }

  getPluginsRoute() {
    return "".concat(this.getBaseRoute(), "/plugins");
  }

  getPluginRoute(pluginId) {
    return "".concat(this.getPluginsRoute(), "/").concat(pluginId);
  }

  getRolesRoute() {
    return "".concat(this.getBaseRoute(), "/roles");
  }

  getTimezonesRoute() {
    return "".concat(this.getBaseRoute(), "/system/timezones");
  }

  getSchemesRoute() {
    return "".concat(this.getBaseRoute(), "/schemes");
  }

  getRedirectLocationRoute() {
    return "".concat(this.getBaseRoute(), "/redirect_location");
  }

  getBotsRoute() {
    return "".concat(this.getBaseRoute(), "/bots");
  }

  getBotRoute(botUserId) {
    return "".concat(this.getBotsRoute(), "/").concat(botUserId);
  }

  getCSRFFromCookie() {
    if (typeof document !== 'undefined' && typeof document.cookie !== 'undefined') {
      const cookies = document.cookie.split(';');

      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();

        if (cookie.startsWith('MMCSRF=')) {
          return cookie.replace('MMCSRF=', '');
        }
      }
    }

    return '';
  }

  getOptions(options) {
    const newOptions = Object.assign({}, options);

    const headers = _objectSpread({
      [HEADER_REQUESTED_WITH]: 'XMLHttpRequest'
    }, this.defaultHeaders);

    if (this.token) {
      headers[HEADER_AUTH] = "".concat(HEADER_BEARER, " ").concat(this.token);
    }

    const csrfToken = this.csrf || this.getCSRFFromCookie();

    if (options.method && options.method.toLowerCase() !== 'get' && csrfToken) {
      headers[HEADER_X_CSRF_TOKEN] = csrfToken;
    }

    if (this.includeCookies) {
      newOptions.credentials = 'include';
    }

    if (this.userAgent) {
      headers[HEADER_USER_AGENT] = this.userAgent;
    }

    if (newOptions.headers) {
      Object.assign(headers, newOptions.headers);
    }

    return _objectSpread({}, newOptions, {
      headers
    });
  } // User Routes


  // Files Routes
  getFileUrl(fileId, timestamp) {
    let url = "".concat(this.getFileRoute(fileId));

    if (timestamp) {
      url += "?".concat(timestamp);
    }

    return url;
  }

  getFileThumbnailUrl(fileId, timestamp) {
    let url = "".concat(this.getFileRoute(fileId), "/thumbnail");

    if (timestamp) {
      url += "?".concat(timestamp);
    }

    return url;
  }

  getFilePreviewUrl(fileId, timestamp) {
    let url = "".concat(this.getFileRoute(fileId), "/preview");

    if (timestamp) {
      url += "?".concat(timestamp);
    }

    return url;
  }

  trackEvent(category, event, props) {
    // Temporary change to allow only certain events to reduce data rate - see MM-13062
    if (!['api_posts_create', 'api_interactive_messages_button_clicked', 'api_interactive_messages_menu_selected', 'api_interactive_messages_dialog_submitted'].includes(event)) {
      return;
    }

    const properties = Object.assign({
      category,
      type: event,
      user_actual_role: this.userRoles && (0, _user_utils.isSystemAdmin)(this.userRoles) ? 'system_admin, system_user' : 'system_user',
      user_actual_id: this.userId
    }, props);
    const options = {
      context: {
        ip: '0.0.0.0'
      },
      page: {
        path: '',
        referrer: '',
        search: '',
        title: '',
        url: ''
      },
      anonymousId: '00000000000000000000000000'
    };

    if (global && global.window && global.window.analytics && global.window.analytics.initialized) {
      global.window.analytics.track('event', properties, options);
    } else if (global && global.analytics) {
      if (global.analytics_context) {
        options.context = global.analytics_context;
      }

      global.analytics.track(Object.assign({
        event: 'event',
        userId: this.diagnosticId
      }, {
        properties
      }, options));
    }
  }

}

exports.default = Client4;

function parseAndMergeNestedHeaders(originalHeaders) {
  const headers = new Map();
  let nestedHeaders = new Map();
  originalHeaders.forEach((val, key) => {
    const capitalizedKey = key.replace(/\b[a-z]/g, l => l.toUpperCase());
    let realVal = val;

    if (val && val.match(/\n\S+:\s\S+/)) {
      const nestedHeaderStrings = val.split('\n');
      realVal = nestedHeaderStrings.shift();
      const moreNestedHeaders = new Map(nestedHeaderStrings.map(h => h.split(/:\s/)));
      nestedHeaders = new Map([...nestedHeaders, ...moreNestedHeaders]);
    }

    headers.set(capitalizedKey, realVal);
  });
  return new Map([...headers, ...nestedHeaders]);
}

class ClientError extends Error {
  constructor(baseUrl, data) {
    super(data.message + ': ' + (0, _sentry.cleanUrlForLogging)(baseUrl, data.url));
    this.message = data.message;
    this.url = data.url;
    this.intl = data.intl;
    this.server_error_id = data.server_error_id;
    this.status_code = data.status_code; // Ensure message is treated as a property of this class when object spreading. Without this,
    // copying the object by using `{...error}` would not include the message.

    Object.defineProperty(this, 'message', {
      enumerable: true
    });
  }

}

exports.ClientError = ClientError;