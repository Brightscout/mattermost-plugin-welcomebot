"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIncomingHook = createIncomingHook;
exports.getIncomingHook = getIncomingHook;
exports.getIncomingHooks = getIncomingHooks;
exports.removeIncomingHook = removeIncomingHook;
exports.updateIncomingHook = updateIncomingHook;
exports.createOutgoingHook = createOutgoingHook;
exports.getOutgoingHook = getOutgoingHook;
exports.getOutgoingHooks = getOutgoingHooks;
exports.removeOutgoingHook = removeOutgoingHook;
exports.updateOutgoingHook = updateOutgoingHook;
exports.regenOutgoingHookToken = regenOutgoingHookToken;
exports.getCommands = getCommands;
exports.getAutocompleteCommands = getAutocompleteCommands;
exports.getCustomTeamCommands = getCustomTeamCommands;
exports.addCommand = addCommand;
exports.editCommand = editCommand;
exports.executeCommand = executeCommand;
exports.regenCommandToken = regenCommandToken;
exports.deleteCommand = deleteCommand;
exports.addOAuthApp = addOAuthApp;
exports.editOAuthApp = editOAuthApp;
exports.getOAuthApps = getOAuthApps;
exports.getOAuthApp = getOAuthApp;
exports.getAuthorizedOAuthApps = getAuthorizedOAuthApps;
exports.deauthorizeOAuthApp = deauthorizeOAuthApp;
exports.deleteOAuthApp = deleteOAuthApp;
exports.regenOAuthAppSecret = regenOAuthAppSecret;
exports.submitInteractiveDialog = submitInteractiveDialog;

var _action_types = require("../action_types");

var _constants = require("../constants");

var _reduxBatchedActions = require("redux-batched-actions");

var _client = require("../client");

var _users = require("../selectors/entities/users");

var _channels = require("../selectors/entities/channels");

var _teams = require("../selectors/entities/teams");

var _errors = require("./errors");

var _helpers = require("./helpers");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function createIncomingHook(hook
/*: IncomingWebhook*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createIncomingWebhook,
    onRequest: _action_types.IntegrationTypes.CREATE_INCOMING_HOOK_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_INCOMING_HOOK, _action_types.IntegrationTypes.CREATE_INCOMING_HOOK_SUCCESS],
    onFailure: _action_types.IntegrationTypes.CREATE_INCOMING_HOOK_FAILURE,
    params: [hook]
  });
}

function getIncomingHook(hookId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getIncomingWebhook,
    onRequest: _action_types.IntegrationTypes.GET_INCOMING_HOOKS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_INCOMING_HOOK, _action_types.IntegrationTypes.GET_INCOMING_HOOKS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_INCOMING_HOOKS_FAILURE,
    params: [hookId]
  });
}

function getIncomingHooks(teamId
/*: string*/
= '', page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getIncomingWebhooks,
    onRequest: _action_types.IntegrationTypes.GET_INCOMING_HOOKS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_INCOMING_HOOKS, _action_types.IntegrationTypes.GET_INCOMING_HOOKS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_INCOMING_HOOKS_FAILURE,
    params: [teamId, page, perPage]
  });
}

function removeIncomingHook(hookId
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.DELETE_INCOMING_HOOK_REQUEST,
      data: {}
    }, getState);

    try {
      await _client.Client4.removeIncomingWebhook(hookId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.DELETE_INCOMING_HOOK_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.IntegrationTypes.DELETED_INCOMING_HOOK,
      data: {
        id: hookId
      }
    }, {
      type: _action_types.IntegrationTypes.DELETE_INCOMING_HOOK_SUCCESS
    }]), getState);
    return {
      data: true
    };
  };
}

function updateIncomingHook(hook
/*: IncomingWebhook*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.updateIncomingWebhook,
    onRequest: _action_types.IntegrationTypes.UPDATE_INCOMING_HOOK_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_INCOMING_HOOK, _action_types.IntegrationTypes.UPDATE_INCOMING_HOOK_SUCCESS],
    onFailure: _action_types.IntegrationTypes.UPDATE_INCOMING_HOOK_FAILURE,
    params: [hook]
  });
}

function createOutgoingHook(hook
/*: OutgoingWebhook*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createOutgoingWebhook,
    onRequest: _action_types.IntegrationTypes.CREATE_OUTGOING_HOOK_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOK, _action_types.IntegrationTypes.CREATE_OUTGOING_HOOK_SUCCESS],
    onFailure: _action_types.IntegrationTypes.CREATE_OUTGOING_HOOK_FAILURE,
    params: [hook]
  });
}

function getOutgoingHook(hookId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getOutgoingWebhook,
    onRequest: _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOK, _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_FAILURE,
    params: [hookId]
  });
}

function getOutgoingHooks(channelId
/*: string*/
= '', teamId
/*: string*/
= '', page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getOutgoingWebhooks,
    onRequest: _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOKS, _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_OUTGOING_HOOKS_FAILURE,
    params: [channelId, teamId, page, perPage]
  });
}

function removeOutgoingHook(hookId
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.DELETE_OUTGOING_HOOK_REQUEST,
      data: {}
    }, getState);

    try {
      await _client.Client4.removeOutgoingWebhook(hookId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.DELETE_OUTGOING_HOOK_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.IntegrationTypes.DELETED_OUTGOING_HOOK,
      data: {
        id: hookId
      }
    }, {
      type: _action_types.IntegrationTypes.DELETE_OUTGOING_HOOK_SUCCESS
    }]), getState);
    return {
      data: true
    };
  };
}

function updateOutgoingHook(hook
/*: OutgoingWebhook*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.updateOutgoingWebhook,
    onRequest: _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOK, _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_SUCCESS],
    onFailure: _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_FAILURE,
    params: [hook]
  });
}

function regenOutgoingHookToken(hookId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.regenOutgoingHookToken,
    onRequest: _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOK, _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_SUCCESS],
    onFailure: _action_types.IntegrationTypes.UPDATE_OUTGOING_HOOK_FAILURE,
    params: [hookId]
  });
}

function getCommands(teamId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getCommandsList,
    onRequest: _action_types.IntegrationTypes.GET_COMMANDS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_COMMANDS, _action_types.IntegrationTypes.GET_COMMANDS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_COMMANDS_FAILURE,
    params: [teamId]
  });
}

function getAutocompleteCommands(teamId
/*: string*/
, page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getAutocompleteCommandsList,
    onRequest: _action_types.IntegrationTypes.GET_AUTOCOMPLETE_COMMANDS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_COMMANDS, _action_types.IntegrationTypes.GET_AUTOCOMPLETE_COMMANDS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_AUTOCOMPLETE_COMMANDS_FAILURE,
    params: [teamId, page, perPage]
  });
}

function getCustomTeamCommands(teamId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getCustomTeamCommands,
    onRequest: _action_types.IntegrationTypes.GET_CUSTOM_TEAM_COMMANDS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_CUSTOM_TEAM_COMMANDS, _action_types.IntegrationTypes.GET_CUSTOM_TEAM_COMMANDS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_CUSTOM_TEAM_COMMANDS_FAILURE,
    params: [teamId]
  });
}

function addCommand(command
/*: Command*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.addCommand,
    onRequest: _action_types.IntegrationTypes.ADD_COMMAND_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_COMMAND, _action_types.IntegrationTypes.ADD_COMMAND_SUCCESS],
    onFailure: _action_types.IntegrationTypes.ADD_COMMAND_FAILURE,
    params: [command]
  });
}

function editCommand(command
/*: Command*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.editCommand,
    onRequest: _action_types.IntegrationTypes.EDIT_COMMAND_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_COMMAND, _action_types.IntegrationTypes.EDIT_COMMAND_SUCCESS],
    onFailure: _action_types.IntegrationTypes.EDIT_COMMAND_FAILURE,
    params: [command]
  });
}

function executeCommand(command
/*: Command*/
, args
/*: Array<string>*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.executeCommand,
    onRequest: _action_types.IntegrationTypes.EXECUTE_COMMAND_REQUEST,
    onSuccess: _action_types.IntegrationTypes.EXECUTE_COMMAND_SUCCESS,
    onFailure: _action_types.IntegrationTypes.EXECUTE_COMMAND_FAILURE,
    params: [command, args]
  });
}

function regenCommandToken(id
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.REGEN_COMMAND_TOKEN_REQUEST,
      data: {}
    }, getState);
    let res;

    try {
      res = await _client.Client4.regenCommandToken(id);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.REGEN_COMMAND_TOKEN_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.IntegrationTypes.RECEIVED_COMMAND_TOKEN,
      data: {
        id,
        token: res.token
      }
    }, {
      type: _action_types.IntegrationTypes.REGEN_COMMAND_TOKEN_SUCCESS
    }]), getState);
    return {
      data: true
    };
  };
}

function deleteCommand(id
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.DELETE_COMMAND_REQUEST,
      data: {}
    }, getState);

    try {
      await _client.Client4.deleteCommand(id);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.DELETE_COMMAND_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.IntegrationTypes.DELETED_COMMAND,
      data: {
        id
      }
    }, {
      type: _action_types.IntegrationTypes.DELETE_COMMAND_SUCCESS
    }]), getState);
    return {
      data: true
    };
  };
}

function addOAuthApp(app
/*: OAuthApp*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createOAuthApp,
    onRequest: _action_types.IntegrationTypes.ADD_OAUTH_APP_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OAUTH_APP, _action_types.IntegrationTypes.ADD_OAUTH_APP_SUCCESS],
    onFailure: _action_types.IntegrationTypes.ADD_OAUTH_APP_FAILURE,
    params: [app]
  });
}

function editOAuthApp(app
/*: OAuthApp*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.editOAuthApp,
    onRequest: _action_types.IntegrationTypes.UPDATE_OAUTH_APP_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OAUTH_APP, _action_types.IntegrationTypes.UPDATE_OAUTH_APP_SUCCESS],
    onFailure: _action_types.IntegrationTypes.UPDATE_OAUTH_APP_FAILURE,
    params: [app]
  });
}

function getOAuthApps(page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getOAuthApps,
    onRequest: _action_types.IntegrationTypes.GET_OAUTH_APPS_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OAUTH_APPS, _action_types.IntegrationTypes.GET_OAUTH_APPS_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_OAUTH_APPS_FAILURE,
    params: [page, perPage]
  });
}

function getOAuthApp(appId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getOAuthApp,
    onRequest: _action_types.IntegrationTypes.GET_OAUTH_APP_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OAUTH_APP, _action_types.IntegrationTypes.GET_OAUTH_APP_SUCCESS],
    onFailure: _action_types.IntegrationTypes.GET_OAUTH_APP_FAILURE,
    params: [appId]
  });
}

function getAuthorizedOAuthApps() {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.GET_AUTHORIZED_OAUTH_APPS_REQUEST,
      data: {}
    });
    const state = getState();
    const currentUserId = (0, _users.getCurrentUserId)(state);
    let data;

    try {
      data = await _client.Client4.getAuthorizedOAuthApps(currentUserId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.GET_AUTHORIZED_OAUTH_APPS_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch({
      type: _action_types.IntegrationTypes.GET_AUTHORIZED_OAUTH_APPS_SUCCESS,
      data: {}
    });
    return {
      data
    };
  };
}

function deauthorizeOAuthApp(clientId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.deauthorizeOAuthApp,
    onRequest: _action_types.IntegrationTypes.DEAUTHORIZE_OAUTH_APP_REQUEST,
    onSuccess: _action_types.IntegrationTypes.DEAUTHORIZE_OAUTH_APP_SUCCESS,
    onFailure: _action_types.IntegrationTypes.DEAUTHORIZE_OAUTH_APP_FAILURE,
    params: [clientId]
  });
}

function deleteOAuthApp(id
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.DELETE_OAUTH_APP_REQUEST,
      data: {}
    }, getState);

    try {
      await _client.Client4.deleteOAuthApp(id);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.DELETE_OAUTH_APP_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.IntegrationTypes.DELETED_OAUTH_APP,
      data: {
        id
      }
    }, {
      type: _action_types.IntegrationTypes.DELETE_OAUTH_APP_SUCCESS
    }]), getState);
    return {
      data: true
    };
  };
}

function regenOAuthAppSecret(appId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.regenOAuthAppSecret,
    onRequest: _action_types.IntegrationTypes.UPDATE_OAUTH_APP_REQUEST,
    onSuccess: [_action_types.IntegrationTypes.RECEIVED_OAUTH_APP, _action_types.IntegrationTypes.UPDATE_OAUTH_APP_SUCCESS],
    onFailure: _action_types.IntegrationTypes.UPDATE_OAUTH_APP_FAILURE,
    params: [appId]
  });
}

function submitInteractiveDialog(submission
/*: DialogSubmission*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.IntegrationTypes.SUBMIT_INTERACTIVE_DIALOG_REQUEST,
      data: {}
    });
    const state = getState();
    submission.channel_id = (0, _channels.getCurrentChannelId)(state);
    submission.team_id = (0, _teams.getCurrentTeamId)(state);
    let data;

    try {
      data = await _client.Client4.submitInteractiveDialog(submission);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.IntegrationTypes.SUBMIT_INTERACTIVE_DIALOG_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch({
      type: _action_types.IntegrationTypes.SUBMIT_INTERACTIVE_DIALOG_SUCCESS,
      data: {}
    });
    return {
      data
    };
  };
}