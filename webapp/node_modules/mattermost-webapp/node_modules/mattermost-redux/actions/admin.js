"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogs = getLogs;
exports.getAudits = getAudits;
exports.getConfig = getConfig;
exports.updateConfig = updateConfig;
exports.reloadConfig = reloadConfig;
exports.getEnvironmentConfig = getEnvironmentConfig;
exports.testEmail = testEmail;
exports.testS3Connection = testS3Connection;
exports.invalidateCaches = invalidateCaches;
exports.recycleDatabase = recycleDatabase;
exports.createComplianceReport = createComplianceReport;
exports.getComplianceReport = getComplianceReport;
exports.getComplianceReports = getComplianceReports;
exports.uploadBrandImage = uploadBrandImage;
exports.deleteBrandImage = deleteBrandImage;
exports.getClusterStatus = getClusterStatus;
exports.testLdap = testLdap;
exports.syncLdap = syncLdap;
exports.getLdapGroups = getLdapGroups;
exports.linkLdapGroup = linkLdapGroup;
exports.unlinkLdapGroup = unlinkLdapGroup;
exports.getSamlCertificateStatus = getSamlCertificateStatus;
exports.uploadPublicSamlCertificate = uploadPublicSamlCertificate;
exports.uploadPrivateSamlCertificate = uploadPrivateSamlCertificate;
exports.uploadIdpSamlCertificate = uploadIdpSamlCertificate;
exports.removePublicSamlCertificate = removePublicSamlCertificate;
exports.removePrivateSamlCertificate = removePrivateSamlCertificate;
exports.removeIdpSamlCertificate = removeIdpSamlCertificate;
exports.testElasticsearch = testElasticsearch;
exports.purgeElasticsearchIndexes = purgeElasticsearchIndexes;
exports.uploadLicense = uploadLicense;
exports.removeLicense = removeLicense;
exports.getAnalytics = getAnalytics;
exports.getStandardAnalytics = getStandardAnalytics;
exports.getAdvancedAnalytics = getAdvancedAnalytics;
exports.getPostsPerDayAnalytics = getPostsPerDayAnalytics;
exports.getBotPostsPerDayAnalytics = getBotPostsPerDayAnalytics;
exports.getUsersPerDayAnalytics = getUsersPerDayAnalytics;
exports.uploadPlugin = uploadPlugin;
exports.installPluginFromUrl = installPluginFromUrl;
exports.getPlugins = getPlugins;
exports.getPluginStatuses = getPluginStatuses;
exports.removePlugin = removePlugin;
exports.enablePlugin = enablePlugin;
exports.disablePlugin = disablePlugin;

var _action_types = require("../action_types");

var _constants = require("../constants");

var _client = require("../client");

var _errors = require("./errors");

var _helpers = require("./helpers");

var _reduxBatchedActions = require("redux-batched-actions");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getLogs(page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.LOGS_PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getLogs,
    onRequest: _action_types.AdminTypes.GET_LOGS_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_LOGS, _action_types.AdminTypes.GET_LOGS_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_LOGS_FAILURE,
    params: [page, perPage]
  });
}

function getAudits(page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getAudits,
    onRequest: _action_types.AdminTypes.GET_AUDITS_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_AUDITS, _action_types.AdminTypes.GET_AUDITS_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_AUDITS_FAILURE,
    params: [page, perPage]
  });
}

function getConfig()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getConfig,
    onRequest: _action_types.AdminTypes.GET_CONFIG_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_CONFIG, _action_types.AdminTypes.GET_CONFIG_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_CONFIG_FAILURE
  });
}

function updateConfig(config
/*: Object*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.updateConfig,
    onRequest: _action_types.AdminTypes.UPDATE_CONFIG_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_CONFIG, _action_types.AdminTypes.UPDATE_CONFIG_SUCCESS],
    onFailure: _action_types.AdminTypes.UPDATE_CONFIG_FAILURE,
    params: [config]
  });
}

function reloadConfig()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.reloadConfig,
    onRequest: _action_types.AdminTypes.RELOAD_CONFIG_REQUEST,
    onSuccess: _action_types.AdminTypes.RELOAD_CONFIG_SUCCESS,
    onFailure: _action_types.AdminTypes.RELOAD_CONFIG_FAILURE
  });
}

function getEnvironmentConfig()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getEnvironmentConfig,
    onRequest: _action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_ENVIRONMENT_CONFIG, _action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_FAILURE
  });
}

function testEmail(config
/*: Object*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.testEmail,
    onRequest: _action_types.AdminTypes.TEST_EMAIL_REQUEST,
    onSuccess: _action_types.AdminTypes.TEST_EMAIL_SUCCESS,
    onFailure: _action_types.AdminTypes.TEST_EMAIL_FAILURE,
    params: [config]
  });
}

function testS3Connection(config
/*: Object*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.testS3Connection,
    onRequest: _action_types.AdminTypes.TEST_S3_REQUEST,
    onSuccess: _action_types.AdminTypes.TEST_S3_SUCCESS,
    onFailure: _action_types.AdminTypes.TEST_S3_FAILURE,
    params: [config]
  });
}

function invalidateCaches()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.invalidateCaches,
    onRequest: _action_types.AdminTypes.INVALIDATE_CACHES_REQUEST,
    onSuccess: _action_types.AdminTypes.INVALIDATE_CACHES_SUCCESS,
    onFailure: _action_types.AdminTypes.INVALIDATE_CACHES_FAILURE
  });
}

function recycleDatabase()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.recycleDatabase,
    onRequest: _action_types.AdminTypes.RECYCLE_DATABASE_REQUEST,
    onSuccess: _action_types.AdminTypes.RECYCLE_DATABASE_SUCCESS,
    onFailure: _action_types.AdminTypes.RECYCLE_DATABASE_FAILURE
  });
}

function createComplianceReport(job
/*: Job*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createComplianceReport,
    onRequest: _action_types.AdminTypes.CREATE_COMPLIANCE_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_COMPLIANCE_REPORT, _action_types.AdminTypes.CREATE_COMPLIANCE_SUCCESS],
    onFailure: _action_types.AdminTypes.CREATE_COMPLIANCE_FAILURE,
    params: [job]
  });
}

function getComplianceReport(reportId
/*: string*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getComplianceReport,
    onRequest: _action_types.AdminTypes.GET_COMPLIANCE_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_COMPLIANCE_REPORT, _action_types.AdminTypes.GET_COMPLIANCE_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_COMPLIANCE_FAILURE,
    params: [reportId]
  });
}

function getComplianceReports(page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getComplianceReports,
    onRequest: _action_types.AdminTypes.GET_COMPLIANCE_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_COMPLIANCE_REPORTS, _action_types.AdminTypes.GET_COMPLIANCE_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_COMPLIANCE_FAILURE,
    params: [page, perPage]
  });
}

function uploadBrandImage(imageData
/*: File*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.uploadBrandImage,
    onRequest: _action_types.AdminTypes.UPLOAD_BRAND_IMAGE_REQUEST,
    onSuccess: _action_types.AdminTypes.UPLOAD_BRAND_IMAGE_SUCCESS,
    onFailure: _action_types.AdminTypes.UPLOAD_BRAND_IMAGE_FAILURE,
    params: [imageData]
  });
}

function deleteBrandImage()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.deleteBrandImage,
    onRequest: _action_types.AdminTypes.DELETE_BRAND_IMAGE_REQUEST,
    onSuccess: _action_types.AdminTypes.DELETE_BRAND_IMAGE_SUCCESS,
    onFailure: _action_types.AdminTypes.DELETE_BRAND_IMAGE_FAILURE
  });
}

function getClusterStatus()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getClusterStatus,
    onRequest: _action_types.AdminTypes.GET_CLUSTER_STATUS_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_CLUSTER_STATUS, _action_types.AdminTypes.GET_CLUSTER_STATUS_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_CLUSTER_STATUS_FAILURE
  });
}

function testLdap()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.testLdap,
    onRequest: _action_types.AdminTypes.TEST_LDAP_REQUEST,
    onSuccess: _action_types.AdminTypes.TEST_LDAP_SUCCESS,
    onFailure: _action_types.AdminTypes.TEST_LDAP_FAILURE
  });
}

function syncLdap()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.syncLdap,
    onRequest: _action_types.AdminTypes.SYNC_LDAP_REQUEST,
    onSuccess: _action_types.AdminTypes.SYNC_LDAP_SUCCESS,
    onFailure: _action_types.AdminTypes.SYNC_LDAP_FAILURE
  });
}

function getLdapGroups(page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_MAXIMUM, opts
/*: GroupSearchOpts*/
= {
  q: ''
})
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getLdapGroups,
    onRequest: _action_types.AdminTypes.GET_LDAP_GROUPS_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_LDAP_GROUPS, _action_types.AdminTypes.GET_LDAP_GROUPS_SUCCESS],
    onFailure: _action_types.AdminTypes.GET_LDAP_GROUPS_FAILURE,
    params: [page, perPage, opts]
  });
}

function linkLdapGroup(key
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.LINK_LDAP_GROUP_REQUEST,
      data: key
    });
    let data;

    try {
      data = await _client.Client4.linkLdapGroup(key);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.LINK_LDAP_GROUP_FAILURE,
        error,
        data: key
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.LINK_LDAP_GROUP_SUCCESS,
      data: null
    }, {
      type: _action_types.AdminTypes.LINKED_LDAP_GROUP,
      data: {
        primary_key: key,
        name: data.display_name,
        mattermost_group_id: data.id,
        has_syncables: false
      }
    }]));
    return {
      data: true
    };
  };
}

function unlinkLdapGroup(key
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.UNLINK_LDAP_GROUP_REQUEST,
      data: key
    });

    try {
      await _client.Client4.unlinkLdapGroup(key);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.UNLINK_LDAP_GROUP_FAILURE,
        error,
        data: key
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.UNLINK_LDAP_GROUP_SUCCESS,
      data: null
    }, {
      type: _action_types.AdminTypes.UNLINKED_LDAP_GROUP,
      data: key
    }]));
    return {
      data: true
    };
  };
}

function getSamlCertificateStatus()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSamlCertificateStatus,
    onRequest: _action_types.AdminTypes.SAML_CERT_STATUS_REQUEST,
    onSuccess: [_action_types.AdminTypes.RECEIVED_SAML_CERT_STATUS, _action_types.AdminTypes.SAML_CERT_STATUS_SUCCESS],
    onFailure: _action_types.AdminTypes.SAML_CERT_STATUS_FAILURE
  });
}

function uploadPublicSamlCertificate(fileData
/*: File*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.uploadPublicSamlCertificate,
    onRequest: _action_types.AdminTypes.UPLOAD_SAML_PUBLIC_REQUEST,
    onSuccess: _action_types.AdminTypes.UPLOAD_SAML_PUBLIC_SUCCESS,
    onFailure: _action_types.AdminTypes.UPLOAD_SAML_PUBLIC_FAILURE,
    params: [fileData]
  });
}

function uploadPrivateSamlCertificate(fileData
/*: File*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.uploadPrivateSamlCertificate,
    onRequest: _action_types.AdminTypes.UPLOAD_SAML_PRIVATE_REQUEST,
    onSuccess: _action_types.AdminTypes.UPLOAD_SAML_PRIVATE_SUCCESS,
    onFailure: _action_types.AdminTypes.UPLOAD_SAML_PRIVATE_FAILURE,
    params: [fileData]
  });
}

function uploadIdpSamlCertificate(fileData
/*: File*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.uploadIdpSamlCertificate,
    onRequest: _action_types.AdminTypes.UPLOAD_SAML_IDP_REQUEST,
    onSuccess: _action_types.AdminTypes.UPLOAD_SAML_IDP_SUCCESS,
    onFailure: _action_types.AdminTypes.UPLOAD_SAML_IDP_FAILURE,
    params: [fileData]
  });
}

function removePublicSamlCertificate()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.deletePublicSamlCertificate,
    onRequest: _action_types.AdminTypes.DELETE_SAML_PUBLIC_REQUEST,
    onSuccess: _action_types.AdminTypes.DELETE_SAML_PUBLIC_SUCCESS,
    onFailure: _action_types.AdminTypes.DELETE_SAML_PUBLIC_FAILURE
  });
}

function removePrivateSamlCertificate()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.deletePrivateSamlCertificate,
    onRequest: _action_types.AdminTypes.DELETE_SAML_PRIVATE_REQUEST,
    onSuccess: _action_types.AdminTypes.DELETE_SAML_PRIVATE_SUCCESS,
    onFailure: _action_types.AdminTypes.DELETE_SAML_PRIVATE_FAILURE
  });
}

function removeIdpSamlCertificate()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.deleteIdpSamlCertificate,
    onRequest: _action_types.AdminTypes.DELETE_SAML_IDP_REQUEST,
    onSuccess: _action_types.AdminTypes.DELETE_SAML_IDP_SUCCESS,
    onFailure: _action_types.AdminTypes.DELETE_SAML_IDP_FAILURE
  });
}

function testElasticsearch(config
/*: Object*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.testElasticsearch,
    onRequest: _action_types.AdminTypes.TEST_ELASTICSEARCH_REQUEST,
    onSuccess: _action_types.AdminTypes.TEST_ELASTICSEARCH_SUCCESS,
    onFailure: _action_types.AdminTypes.TEST_ELASTICSEARCH_FAILURE,
    params: [config]
  });
}

function purgeElasticsearchIndexes()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.purgeElasticsearchIndexes,
    onRequest: _action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_REQUEST,
    onSuccess: _action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_SUCCESS,
    onFailure: _action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_FAILURE
  });
}

function uploadLicense(fileData
/*: File*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.uploadLicense,
    onRequest: _action_types.AdminTypes.UPLOAD_LICENSE_REQUEST,
    onSuccess: _action_types.AdminTypes.UPLOAD_LICENSE_SUCCESS,
    onFailure: _action_types.AdminTypes.UPLOAD_LICENSE_FAILURE,
    params: [fileData]
  });
}

function removeLicense()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.removeLicense,
    onRequest: _action_types.AdminTypes.REMOVE_LICENSE_REQUEST,
    onSuccess: _action_types.AdminTypes.REMOVE_LICENSE_SUCCESS,
    onFailure: _action_types.AdminTypes.REMOVE_LICENSE_FAILURE
  });
}

function getAnalytics(name
/*: string*/
, teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.GET_ANALYTICS_REQUEST,
      data: null
    }, getState);
    let data;

    try {
      data = await _client.Client4.getAnalytics(name, teamId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.GET_ANALYTICS_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    const actions = [{
      type: _action_types.AdminTypes.GET_ANALYTICS_SUCCESS,
      data: null
    }];

    if (teamId === '') {
      actions.push({
        type: _action_types.AdminTypes.RECEIVED_SYSTEM_ANALYTICS,
        data,
        name
      });
    } else {
      actions.push({
        type: _action_types.AdminTypes.RECEIVED_TEAM_ANALYTICS,
        data,
        name,
        teamId
      });
    }

    dispatch((0, _reduxBatchedActions.batchActions)(actions), getState);
    return {
      data
    };
  };
}

function getStandardAnalytics(teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return getAnalytics('standard', teamId);
}

function getAdvancedAnalytics(teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return getAnalytics('extra_counts', teamId);
}

function getPostsPerDayAnalytics(teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return getAnalytics('post_counts_day', teamId);
}

function getBotPostsPerDayAnalytics(teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return getAnalytics('bot_post_counts_day', teamId);
}

function getUsersPerDayAnalytics(teamId
/*: string*/
= '')
/*: ActionFunc*/
{
  return getAnalytics('user_counts_with_posts_day', teamId);
}

function uploadPlugin(fileData
/*: File*/
, force
/*: boolean*/
= false)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.UPLOAD_PLUGIN_REQUEST,
      data: null
    });
    let data;

    try {
      data = await _client.Client4.uploadPlugin(fileData, force);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.UPLOAD_PLUGIN_FAILURE,
        error
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.UPLOAD_PLUGIN_SUCCESS,
      data: null
    }]));
    return {
      data
    };
  };
}

function installPluginFromUrl(url
/*: string*/
, force
/*: boolean*/
= false)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_REQUEST,
      data: null
    });
    let data;

    try {
      data = await _client.Client4.installPluginFromUrl(url, force);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_FAILURE,
        error
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch({
      type: _action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_SUCCESS,
      data: null
    });
    return {
      data
    };
  };
}

function getPlugins()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getPlugins,
    onRequest: _action_types.AdminTypes.GET_PLUGIN_REQUEST,
    onSuccess: [_action_types.AdminTypes.GET_PLUGIN_SUCCESS, _action_types.AdminTypes.RECEIVED_PLUGINS],
    onFailure: _action_types.AdminTypes.GET_PLUGIN_FAILURE
  });
}

function getPluginStatuses()
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getPluginStatuses,
    onRequest: _action_types.AdminTypes.GET_PLUGIN_STATUSES_REQUEST,
    onSuccess: [_action_types.AdminTypes.GET_PLUGIN_STATUSES_SUCCESS, _action_types.AdminTypes.RECEIVED_PLUGIN_STATUSES],
    onFailure: _action_types.AdminTypes.GET_PLUGIN_STATUSES_FAILURE
  });
}

function removePlugin(pluginId
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.REMOVE_PLUGIN_REQUEST,
      data: pluginId
    });

    try {
      await _client.Client4.removePlugin(pluginId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.REMOVE_PLUGIN_FAILURE,
        error,
        data: pluginId
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.REMOVE_PLUGIN_SUCCESS,
      data: null
    }, {
      type: _action_types.AdminTypes.REMOVED_PLUGIN,
      data: pluginId
    }]));
    return {
      data: true
    };
  };
}

function enablePlugin(pluginId
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.ENABLE_PLUGIN_REQUEST,
      data: pluginId
    });

    try {
      await _client.Client4.enablePlugin(pluginId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.ENABLE_PLUGIN_FAILURE,
        error,
        data: pluginId
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.ENABLE_PLUGIN_SUCCESS,
      data: null
    }, {
      type: _action_types.AdminTypes.ENABLED_PLUGIN,
      data: pluginId
    }]));
    return {
      data: true
    };
  };
}

function disablePlugin(pluginId
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.AdminTypes.DISABLE_PLUGIN_REQUEST,
      data: pluginId
    });

    try {
      await _client.Client4.disablePlugin(pluginId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.AdminTypes.DISABLE_PLUGIN_FAILURE,
        error,
        data: pluginId
      }, (0, _errors.logError)(error)]));
      return {
        error
      };
    }

    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.AdminTypes.DISABLE_PLUGIN_SUCCESS,
      data: null
    }, {
      type: _action_types.AdminTypes.DISABLED_PLUGIN,
      data: pluginId
    }]));
    return {
      data: true
    };
  };
}