"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.autoUpdateTimezone = autoUpdateTimezone;

var _users = require("../selectors/entities/users");

var _timezone = require("../selectors/entities/timezone");

var _users2 = require("./users");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function autoUpdateTimezone(deviceTimezone
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    const currentUer = (0, _users.getCurrentUser)(getState());
    const currentTimezone = (0, _timezone.getUserTimezone)(getState(), currentUer.id);
    const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;

    if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {
      const timezone = {
        useAutomaticTimezone: 'true',
        automaticTimezone: deviceTimezone,
        manualTimezone: currentTimezone.manualTimezone
      };

      const updatedUser = _objectSpread({}, currentUer, {
        timezone
      });

      (0, _users2.updateMe)(updatedUser)(dispatch, getState);
    }
  };
}