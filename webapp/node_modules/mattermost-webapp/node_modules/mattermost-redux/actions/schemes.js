"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScheme = getScheme;
exports.getSchemes = getSchemes;
exports.createScheme = createScheme;
exports.deleteScheme = deleteScheme;
exports.patchScheme = patchScheme;
exports.getSchemeTeams = getSchemeTeams;
exports.getSchemeChannels = getSchemeChannels;

var _client = require("../client");

var _action_types = require("../action_types");

var _constants = require("../constants");

var _reduxBatchedActions = require("redux-batched-actions");

var _helpers = require("./helpers");

var _errors = require("./errors");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getScheme(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getScheme,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME, _action_types.SchemeTypes.GET_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_FAILURE,
    params: [schemeId]
  });
}

function getSchemes(scope
/*: SchemeScope*/
, page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemes,
    onRequest: _action_types.SchemeTypes.GET_SCHEMES_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEMES, _action_types.SchemeTypes.GET_SCHEMES_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEMES_FAILURE,
    params: [scope, page, perPage]
  });
}

function createScheme(scheme
/*: Scheme*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.createScheme,
    onRequest: _action_types.SchemeTypes.CREATE_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.CREATED_SCHEME, _action_types.SchemeTypes.CREATE_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.CREATE_SCHEME_FAILURE,
    params: [scheme]
  });
}

function deleteScheme(schemeId
/*: string*/
)
/*: ActionFunc*/
{
  return async (dispatch, getState) => {
    dispatch({
      type: _action_types.SchemeTypes.DELETE_SCHEME_REQUEST,
      data: null
    }, getState);
    let data = null;

    try {
      data = await _client.Client4.deleteScheme(schemeId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _reduxBatchedActions.batchActions)([{
        type: _action_types.SchemeTypes.DELETE_SCHEME_FAILURE,
        error
      }, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    dispatch({
      type: _action_types.SchemeTypes.DELETED_SCHEME,
      data: {
        schemeId
      }
    }, getState);
    dispatch({
      type: _action_types.SchemeTypes.DELETE_SCHEME_SUCCESS,
      data: null
    }, getState);
    return {
      data
    };
  };
}

function patchScheme(schemeId
/*: string*/
, scheme
/*: SchemePatch*/
)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.patchScheme,
    onRequest: _action_types.SchemeTypes.PATCH_SCHEME_REQUEST,
    onSuccess: [_action_types.SchemeTypes.PATCHED_SCHEME, _action_types.SchemeTypes.PATCH_SCHEME_SUCCESS],
    onFailure: _action_types.SchemeTypes.PATCH_SCHEME_FAILURE,
    params: [schemeId, scheme]
  });
}

function getSchemeTeams(schemeId
/*: string*/
, page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemeTeams,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_TEAMS_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME_TEAMS, _action_types.SchemeTypes.GET_SCHEME_TEAMS_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_TEAMS_FAILURE,
    params: [schemeId, page, perPage]
  });
}

function getSchemeChannels(schemeId
/*: string*/
, page
/*: number*/
= 0, perPage
/*: number*/
= _constants.General.PAGE_SIZE_DEFAULT)
/*: ActionFunc*/
{
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getSchemeChannels,
    onRequest: _action_types.SchemeTypes.GET_SCHEME_CHANNELS_REQUEST,
    onSuccess: [_action_types.SchemeTypes.RECEIVED_SCHEME_CHANNELS, _action_types.SchemeTypes.GET_SCHEME_CHANNELS_SUCCESS],
    onFailure: _action_types.SchemeTypes.GET_SCHEME_CHANNELS_FAILURE,
    params: [schemeId, page, perPage]
  });
}