"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilesForPost = getFilesForPost;
exports.getMissingFilesForPost = getMissingFilesForPost;
exports.uploadFile = uploadFile;
exports.getFilePublicLink = getFilePublicLink;

var _reduxBatchedActions = require("redux-batched-actions");

var _client = require("../client");

var _action_types = require("../action_types");

var _errors = require("./errors");

var _helpers = require("./helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getFilesForPost(postId
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    let files;

    try {
      files = await _client.Client4.getFileInfosForPost(postId);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      dispatch((0, _errors.logError)(error));
      return {
        error
      };
    }

    dispatch({
      type: _action_types.FileTypes.RECEIVED_FILES_FOR_POST,
      data: files,
      postId
    });
    return {
      data: true
    };
  };
}

function getMissingFilesForPost(postId
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    const {
      fileIdsByPostId
    } = getState().entities.files;
    let posts = [];

    if (!fileIdsByPostId[postId]) {
      posts = await getFilesForPost(postId)(dispatch, getState);
    }

    return {
      data: posts
    };
  };
}

function uploadFile(channelId
/*: string*/
, rootId
/*: string*/
, clientIds
/*: Array<String>*/
, fileFormData
/*: File*/
, formBoundary
/*: string*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.FileTypes.UPLOAD_FILES_REQUEST,
      data: {}
    }, getState);
    let files;

    try {
      files = await _client.Client4.uploadFile(fileFormData, formBoundary);
    } catch (error) {
      (0, _helpers.forceLogoutIfNecessary)(error, dispatch, getState);
      const failure = {
        type: _action_types.FileTypes.UPLOAD_FILES_FAILURE,
        clientIds,
        channelId,
        rootId,
        error
      };
      dispatch((0, _reduxBatchedActions.batchActions)([failure, (0, _errors.logError)(error)]), getState);
      return {
        error
      };
    }

    const data = files.file_infos.map((file, index) => {
      return _objectSpread({}, file, {
        clientId: files.client_ids[index]
      });
    });
    dispatch((0, _reduxBatchedActions.batchActions)([{
      type: _action_types.FileTypes.RECEIVED_UPLOAD_FILES,
      data,
      channelId,
      rootId
    }, {
      type: _action_types.FileTypes.UPLOAD_FILES_SUCCESS
    }]), getState);
    return {
      data: files
    };
  };
}

function getFilePublicLink(fileId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getFilePublicLink,
    onSuccess: _action_types.FileTypes.RECEIVED_FILE_PUBLIC_LINK,
    params: [fileId]
  });
}