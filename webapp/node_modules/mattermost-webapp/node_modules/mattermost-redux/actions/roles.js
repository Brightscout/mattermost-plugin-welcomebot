"use strict";

require("core-js/modules/es.promise");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRolesByNames = getRolesByNames;
exports.getRoleByName = getRoleByName;
exports.getRole = getRole;
exports.editRole = editRole;
exports.setPendingRoles = setPendingRoles;
exports.loadRolesIfNeeded = loadRolesIfNeeded;

var _client = require("../client");

var _action_types = require("../action_types");

var _roles = require("../selectors/entities/roles");

var _general = require("../selectors/entities/general");

var _helpers = require("./helpers");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getRolesByNames(rolesNames
/*: Array<string>*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getRolesByNames,
    onRequest: _action_types.RoleTypes.ROLES_BY_NAMES_REQUEST,
    onSuccess: [_action_types.RoleTypes.RECEIVED_ROLES, _action_types.RoleTypes.ROLES_BY_NAMES_SUCCESS],
    onFailure: _action_types.RoleTypes.ROLES_BY_NAMES_FAILURE,
    params: [rolesNames]
  });
}

function getRoleByName(roleName
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getRoleByName,
    onRequest: _action_types.RoleTypes.ROLE_BY_NAME_REQUEST,
    onSuccess: [_action_types.RoleTypes.RECEIVED_ROLE, _action_types.RoleTypes.ROLE_BY_NAME_SUCCESS],
    onFailure: _action_types.RoleTypes.ROLE_BY_NAME_FAILURE,
    params: [roleName]
  });
}

function getRole(roleId
/*: string*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.getRole,
    onRequest: _action_types.RoleTypes.ROLE_BY_ID_REQUEST,
    onSuccess: [_action_types.RoleTypes.RECEIVED_ROLE, _action_types.RoleTypes.ROLE_BY_ID_SUCCESS],
    onFailure: _action_types.RoleTypes.ROLE_BY_ID_FAILURE,
    params: [roleId]
  });
}

function editRole(role
/*: Role*/
) {
  return (0, _helpers.bindClientFunc)({
    clientFunc: _client.Client4.patchRole,
    onRequest: _action_types.RoleTypes.EDIT_ROLE_REQUEST,
    onSuccess: [_action_types.RoleTypes.RECEIVED_ROLE, _action_types.RoleTypes.EDIT_ROLE_SUCCESS],
    onFailure: _action_types.RoleTypes.EDIT_ROLE_FAILURE,
    params: [role.id, role]
  });
}

function setPendingRoles(roles
/*: Array<string>*/
) {
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    dispatch({
      type: _action_types.RoleTypes.SET_PENDING_ROLES,
      data: roles
    }, getState);
    return {
      data: roles
    };
  };
}

function loadRolesIfNeeded(roles
/*: Iterable<string>*/
)
/*: ActionFunc*/
{
  return async (dispatch
  /*: DispatchFunc*/
  , getState
  /*: GetStateFunc*/
  ) => {
    const state = getState();
    let pendingRoles = new Set();

    try {
      pendingRoles = new Set(state.entities.roles.pending);
    } catch (e) {// eslint-disable-line
    }

    for (const role of roles) {
      pendingRoles.add(role);
    }

    if (!state.entities.general.serverVersion) {
      setPendingRoles(Array.from(pendingRoles))(dispatch, getState);
      setTimeout(() => dispatch(loadRolesIfNeeded([])), 500);
      return {
        data: []
      };
    }

    if (!(0, _general.hasNewPermissions)(state)) {
      if (state.entities.roles.pending) {
        await setPendingRoles([])(dispatch, getState);
      }

      return {
        data: []
      };
    }

    const loadedRoles = (0, _roles.getRoles)(state);
    const newRoles = new Set();

    for (const role of pendingRoles) {
      if (!loadedRoles[role] && role.trim() !== '') {
        newRoles.add(role);
      }
    }

    if (state.entities.roles.pending) {
      await setPendingRoles([])(dispatch, getState);
    }

    if (newRoles.size > 0) {
      return getRolesByNames(Array.from(newRoles))(dispatch, getState);
    }

    return {
      data: state.entities.roles.roles
    };
  };
}