"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _action_types = require("../../action_types");

var _helpers = require("./helpers");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function linkGroupSyncable(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.LINK_GROUP_SYNCABLE_REQUEST, _action_types.GroupTypes.LINK_GROUP_SYNCABLE_SUCCESS, _action_types.GroupTypes.LINK_GROUP_SYNCABLE_FAILURE, state, action);
}

function unlinkGroupSyncable(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.UNLINK_GROUP_SYNCABLE_REQUEST, _action_types.GroupTypes.UNLINK_GROUP_SYNCABLE_SUCCESS, _action_types.GroupTypes.UNLINK_GROUP_SYNCABLE_FAILURE, state, action);
}

function getGroupSyncables(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUP_SYNCABLES_REQUEST, _action_types.GroupTypes.GET_GROUP_SYNCABLES_SUCCESS, _action_types.GroupTypes.GET_GROUP_SYNCABLES_FAILURE, state, action);
}

function getGroupMembers(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUP_MEMBERS_REQUEST, _action_types.GroupTypes.GET_GROUP_MEMBERS_SUCCESS, _action_types.GroupTypes.GET_GROUP_MEMBERS_FAILURE, state, action);
}

function getGroup(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUP_REQUEST, _action_types.GroupTypes.GET_GROUP_SUCCESS, _action_types.GroupTypes.GET_GROUP_FAILURE, state, action);
}

function getAllGroupsAssociatedToTeam(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_TEAM_REQUEST, _action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_TEAM_SUCCESS, _action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_TEAM_FAILURE, state, action);
}

function getAllGroupsAssociatedToChannel(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_CHANNEL_REQUEST, _action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_CHANNEL_SUCCESS, _action_types.GroupTypes.GET_ALL_GROUPS_ASSOCIATED_TO_CHANNEL_FAILURE, state, action);
}

function getGroupsAssociatedToTeam(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_TEAM_REQUEST, _action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_TEAM_SUCCESS, _action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_TEAM_FAILURE, state, action);
}

function getGroupsAssociatedToChannel(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_CHANNEL_REQUEST, _action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_CHANNEL_SUCCESS, _action_types.GroupTypes.GET_GROUPS_ASSOCIATED_TO_CHANNEL_FAILURE, state, action);
}

function getGroupsNotAssociatedToTeam(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_TEAM_REQUEST, _action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_TEAM_SUCCESS, _action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_TEAM_FAILURE, state, action);
}

function getGroupsNotAssociatedToChannel(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_CHANNEL_REQUEST, _action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_CHANNEL_SUCCESS, _action_types.GroupTypes.GET_GROUPS_NOT_ASSOCIATED_TO_CHANNEL_FAILURE, state, action);
}

var _default = ((0, _redux.combineReducers)({
  linkGroupSyncable,
  unlinkGroupSyncable,
  getGroupSyncables,
  getGroupMembers,
  getGroup,
  getAllGroupsAssociatedToTeam,
  getAllGroupsAssociatedToChannel,
  getGroupsAssociatedToTeam,
  getGroupsAssociatedToChannel,
  getGroupsNotAssociatedToTeam,
  getGroupsNotAssociatedToChannel
})
/*: (GroupsRequestsStatuses, GenericAction) => GroupsRequestsStatuses*/
);

exports.default = _default;