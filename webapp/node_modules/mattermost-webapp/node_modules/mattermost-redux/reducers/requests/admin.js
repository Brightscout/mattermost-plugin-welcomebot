"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _action_types = require("../../action_types");

var _helpers = require("./helpers");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getLogs(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_LOGS_REQUEST, _action_types.AdminTypes.GET_LOGS_SUCCESS, _action_types.AdminTypes.GET_LOGS_FAILURE, state, action);
}

function getAudits(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_AUDITS_REQUEST, _action_types.AdminTypes.GET_AUDITS_SUCCESS, _action_types.AdminTypes.GET_AUDITS_FAILURE, state, action);
}

function getConfig(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_CONFIG_REQUEST, _action_types.AdminTypes.GET_CONFIG_SUCCESS, _action_types.AdminTypes.GET_CONFIG_FAILURE, state, action);
}

function updateConfig(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPDATE_CONFIG_REQUEST, _action_types.AdminTypes.UPDATE_CONFIG_SUCCESS, _action_types.AdminTypes.UPDATE_CONFIG_FAILURE, state, action);
}

function reloadConfig(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.RELOAD_CONFIG_REQUEST, _action_types.AdminTypes.RELOAD_CONFIG_SUCCESS, _action_types.AdminTypes.RELOAD_CONFIG_FAILURE, state, action);
}

function getEnvironmentConfig(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_REQUEST, _action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_SUCCESS, _action_types.AdminTypes.GET_ENVIRONMENT_CONFIG_FAILURE, state, action);
}

function testEmail(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.TEST_EMAIL_REQUEST, _action_types.AdminTypes.TEST_EMAIL_SUCCESS, _action_types.AdminTypes.TEST_EMAIL_FAILURE, state, action);
}

function testS3Connection(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.TEST_S3_REQUEST, _action_types.AdminTypes.TEST_S3_SUCCESS, _action_types.AdminTypes.TEST_S3_FAILURE, state, action);
}

function invalidateCaches(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.INVALIDATE_CACHES_REQUEST, _action_types.AdminTypes.INVALIDATE_CACHES_SUCCESS, _action_types.AdminTypes.INVALIDATE_CACHES_FAILURE, state, action);
}

function recycleDatabase(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.RECYCLE_DATABASE_REQUEST, _action_types.AdminTypes.RECYCLE_DATABASE_SUCCESS, _action_types.AdminTypes.RECYCLE_DATABASE_FAILURE, state, action);
}

function createCompliance(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.CREATE_COMPLIANCE_REQUEST, _action_types.AdminTypes.CREATE_COMPLIANCE_SUCCESS, _action_types.AdminTypes.CREATE_COMPLIANCE_FAILURE, state, action);
}

function getCompliance(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_COMPLIANCE_REQUEST, _action_types.AdminTypes.GET_COMPLIANCE_SUCCESS, _action_types.AdminTypes.GET_COMPLIANCE_FAILURE, state, action);
}

function uploadBrandImage(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_BRAND_IMAGE_REQUEST, _action_types.AdminTypes.UPLOAD_BRAND_IMAGE_SUCCESS, _action_types.AdminTypes.UPLOAD_BRAND_IMAGE_FAILURE, state, action);
}

function deleteBrandImage(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.DELETE_BRAND_IMAGE_REQUEST, _action_types.AdminTypes.DELETE_BRAND_IMAGE_SUCCESS, _action_types.AdminTypes.DELETE_BRAND_IMAGE_FAILURE, state, action);
}

function getClusterStatus(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_CLUSTER_STATUS_REQUEST, _action_types.AdminTypes.GET_CLUSTER_STATUS_SUCCESS, _action_types.AdminTypes.GET_CLUSTER_STATUS_FAILURE, state, action);
}

function testLdap(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.TEST_LDAP_REQUEST, _action_types.AdminTypes.TEST_LDAP_SUCCESS, _action_types.AdminTypes.TEST_LDAP_FAILURE, state, action);
}

function syncLdap(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.SYNC_LDAP_REQUEST, _action_types.AdminTypes.SYNC_LDAP_SUCCESS, _action_types.AdminTypes.SYNC_LDAP_FAILURE, state, action);
}

function getLdapGroups(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_LDAP_GROUPS_REQUEST, _action_types.AdminTypes.GET_LDAP_GROUPS_SUCCESS, _action_types.AdminTypes.GET_LDAP_GROUPS_FAILURE, state, action);
}

function linkLdapGroup(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.LINK_LDAP_GROUP_REQUEST, _action_types.AdminTypes.LINK_LDAP_GROUP_SUCCESS, _action_types.AdminTypes.LINK_LDAP_GROUP_FAILURE, state, action);
}

function unlinkLdapGroup(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UNLINK_LDAP_GROUP_REQUEST, _action_types.AdminTypes.UNLINK_LDAP_GROUP_SUCCESS, _action_types.AdminTypes.UNLINK_LDAP_GROUP_FAILURE, state, action);
}

function getSamlCertificateStatus(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.SAML_CERT_STATUS_REQUEST, _action_types.AdminTypes.SAML_CERT_STATUS_SUCCESS, _action_types.AdminTypes.SAML_CERT_STATUS_FAILURE, state, action);
}

function uploadPublicSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_SAML_PUBLIC_REQUEST, _action_types.AdminTypes.UPLOAD_SAML_PUBLIC_SUCCESS, _action_types.AdminTypes.UPLOAD_SAML_PUBLIC_FAILURE, state, action);
}

function uploadPrivateSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_SAML_PRIVATE_REQUEST, _action_types.AdminTypes.UPLOAD_SAML_PRIVATE_SUCCESS, _action_types.AdminTypes.UPLOAD_SAML_PRIVATE_FAILURE, state, action);
}

function uploadIdpSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_SAML_IDP_REQUEST, _action_types.AdminTypes.UPLOAD_SAML_IDP_SUCCESS, _action_types.AdminTypes.UPLOAD_SAML_IDP_FAILURE, state, action);
}

function removePublicSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.DELETE_SAML_PUBLIC_REQUEST, _action_types.AdminTypes.DELETE_SAML_PUBLIC_SUCCESS, _action_types.AdminTypes.DELETE_SAML_PUBLIC_FAILURE, state, action);
}

function removePrivateSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.DELETE_SAML_PRIVATE_REQUEST, _action_types.AdminTypes.DELETE_SAML_PRIVATE_SUCCESS, _action_types.AdminTypes.DELETE_SAML_PRIVATE_FAILURE, state, action);
}

function removeIdpSamlCertificate(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.DELETE_SAML_IDP_REQUEST, _action_types.AdminTypes.DELETE_SAML_IDP_SUCCESS, _action_types.AdminTypes.DELETE_SAML_IDP_FAILURE, state, action);
}

function testElasticsearch(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.TEST_ELASTICSEARCH_REQUEST, _action_types.AdminTypes.TEST_ELASTICSEARCH_SUCCESS, _action_types.AdminTypes.TEST_ELASTICSEARCH_FAILURE, state, action);
}

function purgeElasticsearchIndexes(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_REQUEST, _action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_SUCCESS, _action_types.AdminTypes.PURGE_ELASTICSEARCH_INDEXES_FAILURE, state, action);
}

function uploadLicense(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_LICENSE_REQUEST, _action_types.AdminTypes.UPLOAD_LICENSE_SUCCESS, _action_types.AdminTypes.UPLOAD_LICENSE_FAILURE, state, action);
}

function removeLicense(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.REMOVE_LICENSE_REQUEST, _action_types.AdminTypes.REMOVE_LICENSE_SUCCESS, _action_types.AdminTypes.REMOVE_LICENSE_FAILURE, state, action);
}

function getAnalytics(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_ANALYTICS_REQUEST, _action_types.AdminTypes.GET_ANALYTICS_SUCCESS, _action_types.AdminTypes.GET_ANALYTICS_FAILURE, state, action);
}

function uploadPlugin(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.UPLOAD_PLUGIN_REQUEST, _action_types.AdminTypes.UPLOAD_PLUGIN_SUCCESS, _action_types.AdminTypes.UPLOAD_PLUGIN_FAILURE, state, action);
}

function installPluginFromUrl(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_REQUEST, _action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_SUCCESS, _action_types.AdminTypes.INSTALL_PLUGIN_FROM_URL_FAILURE, state, action);
}

function getPlugins(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_PLUGIN_REQUEST, _action_types.AdminTypes.GET_PLUGIN_SUCCESS, _action_types.AdminTypes.GET_PLUGIN_FAILURE, state, action);
}

function getPluginStatuses(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.GET_PLUGIN_STATUSES_REQUEST, _action_types.AdminTypes.GET_PLUGIN_STATUSES_SUCCESS, _action_types.AdminTypes.GET_PLUGIN_STATUSES_FAILURE, state, action);
}

function removePlugin(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.REMOVE_PLUGIN_REQUEST, _action_types.AdminTypes.REMOVE_PLUGIN_SUCCESS, _action_types.AdminTypes.REMOVE_PLUGIN_FAILURE, state, action);
}

function enablePlugin(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.ENABLE_PLUGIN_REQUEST, _action_types.AdminTypes.ENABLE_PLUGIN_SUCCESS, _action_types.AdminTypes.ENABLE_PLUGIN_FAILURE, state, action);
}

function disablePlugin(state
/*: RequestStatusType*/
= (0, _helpers.initialRequestState)(), action
/*: GenericAction*/
)
/*: RequestStatusType*/
{
  return (0, _helpers.handleRequest)(_action_types.AdminTypes.DISABLE_PLUGIN_REQUEST, _action_types.AdminTypes.DISABLE_PLUGIN_SUCCESS, _action_types.AdminTypes.DISABLE_PLUGIN_FAILURE, state, action);
}

var _default = ((0, _redux.combineReducers)({
  getLogs,
  getAudits,
  getConfig,
  updateConfig,
  reloadConfig,
  getEnvironmentConfig,
  testEmail,
  testS3Connection,
  invalidateCaches,
  recycleDatabase,
  createCompliance,
  getCompliance,
  uploadBrandImage,
  deleteBrandImage,
  getClusterStatus,
  testLdap,
  syncLdap,
  getLdapGroups,
  linkLdapGroup,
  unlinkLdapGroup,
  getSamlCertificateStatus,
  uploadPublicSamlCertificate,
  uploadPrivateSamlCertificate,
  uploadIdpSamlCertificate,
  removePublicSamlCertificate,
  removePrivateSamlCertificate,
  removeIdpSamlCertificate,
  testElasticsearch,
  purgeElasticsearchIndexes,
  uploadLicense,
  removeLicense,
  getAnalytics,
  uploadPlugin,
  installPluginFromUrl,
  getPlugins,
  getPluginStatuses,
  removePlugin,
  enablePlugin,
  disablePlugin
})
/*: (AdminRequestsStatuses, GenericAction) => AdminRequestsStatuses*/
);

exports.default = _default;