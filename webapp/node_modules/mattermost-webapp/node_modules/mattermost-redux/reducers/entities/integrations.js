"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _action_types = require("../../action_types");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function incomingHooks(state = {}, action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_INCOMING_HOOK:
      {
        const nextState = _objectSpread({}, state);

        nextState[action.data.id] = action.data;
        return nextState;
      }

    case _action_types.IntegrationTypes.RECEIVED_INCOMING_HOOKS:
      {
        const nextState = _objectSpread({}, state);

        for (const hook of action.data) {
          nextState[hook.id] = hook;
        }

        return nextState;
      }

    case _action_types.IntegrationTypes.DELETED_INCOMING_HOOK:
      {
        const nextState = _objectSpread({}, state);

        Reflect.deleteProperty(nextState, action.data.id);
        return nextState;
      }

    case _action_types.ChannelTypes.RECEIVED_CHANNEL_DELETED:
      {
        const nextState = _objectSpread({}, state);

        let deleted = false;
        Object.keys(nextState).forEach(id => {
          if (nextState[id].channel_id === action.data.id) {
            deleted = true;
            Reflect.deleteProperty(nextState, id);
          }
        });

        if (deleted) {
          return nextState;
        }

        return state;
      }

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function outgoingHooks(state = {}, action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOK:
      {
        const nextState = _objectSpread({}, state);

        nextState[action.data.id] = action.data;
        return nextState;
      }

    case _action_types.IntegrationTypes.RECEIVED_OUTGOING_HOOKS:
      {
        const nextState = _objectSpread({}, state);

        for (const hook of action.data) {
          nextState[hook.id] = hook;
        }

        return nextState;
      }

    case _action_types.IntegrationTypes.DELETED_OUTGOING_HOOK:
      {
        const nextState = _objectSpread({}, state);

        Reflect.deleteProperty(nextState, action.data.id);
        return nextState;
      }

    case _action_types.ChannelTypes.RECEIVED_CHANNEL_DELETED:
      {
        const nextState = _objectSpread({}, state);

        let deleted = false;
        Object.keys(nextState).forEach(id => {
          if (nextState[id].channel_id === action.data.id) {
            deleted = true;
            Reflect.deleteProperty(nextState, id);
          }
        });

        if (deleted) {
          return nextState;
        }

        return state;
      }

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function commands(state = {}, action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_COMMANDS:
    case _action_types.IntegrationTypes.RECEIVED_CUSTOM_TEAM_COMMANDS:
      {
        const nextState = _objectSpread({}, state);

        for (const command of action.data) {
          if (command.id) {
            const id = command.id;
            nextState[id] = command;
          }
        }

        return nextState;
      }

    case _action_types.IntegrationTypes.RECEIVED_COMMAND:
      if (action.data.id) {
        return _objectSpread({}, state, {
          [action.data.id]: action.data
        });
      }

      return state;

    case _action_types.IntegrationTypes.RECEIVED_COMMAND_TOKEN:
      {
        const {
          id,
          token
        } = action.data;
        return _objectSpread({}, state, {
          [id]: _objectSpread({}, state[id], {
            token
          })
        });
      }

    case _action_types.IntegrationTypes.DELETED_COMMAND:
      {
        const nextState = _objectSpread({}, state);

        Reflect.deleteProperty(nextState, action.data.id);
        return nextState;
      }

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function systemCommands(state = {}, action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_COMMANDS:
      {
        const nextCommands = {};

        for (const command of action.data) {
          if (!command.id) {
            nextCommands[command.trigger] = command;
          }
        }

        return nextCommands;
      }

    case _action_types.IntegrationTypes.RECEIVED_COMMAND:
      if (!action.data.id) {
        return _objectSpread({}, state, {
          [action.data.trigger]: action.data
        });
      }

      return state;

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function oauthApps(state = {}, action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_OAUTH_APPS:
      {
        const nextState = _objectSpread({}, state);

        for (const app of action.data) {
          nextState[app.id] = app;
        }

        return nextState;
      }

    case _action_types.IntegrationTypes.RECEIVED_OAUTH_APP:
      return _objectSpread({}, state, {
        [action.data.id]: action.data
      });

    case _action_types.IntegrationTypes.DELETED_OAUTH_APP:
      {
        const nextState = _objectSpread({}, state);

        Reflect.deleteProperty(nextState, action.data.id);
        return nextState;
      }

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function dialogTriggerId(state = '', action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_DIALOG_TRIGGER_ID:
      return action.data;

    default:
      return state;
  }
}

function dialog(state = '', action) {
  switch (action.type) {
    case _action_types.IntegrationTypes.RECEIVED_DIALOG:
      return action.data;

    default:
      return state;
  }
}

var _default = (0, _redux.combineReducers)({
  // object where every key is the hook id and has an object with the incoming hook details
  incomingHooks,
  // object where every key is the hook id and has an object with the outgoing hook details
  outgoingHooks,
  // object to represent installed slash commands for a current team
  commands,
  // object to represent registered oauth apps with app id as the key
  oauthApps,
  // object to represent built-in slash commands
  systemCommands,
  // trigger ID for interactive dialogs
  dialogTriggerId,
  // data for an interactive dialog to display
  dialog
});

exports.default = _default;