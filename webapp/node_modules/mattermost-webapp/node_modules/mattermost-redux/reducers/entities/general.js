"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _action_types = require("../../action_types");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
function config(state = {}, action) {
  switch (action.type) {
    case _action_types.GeneralTypes.CLIENT_CONFIG_RECEIVED:
      return Object.assign({}, state, action.data);

    case _action_types.GeneralTypes.CLIENT_CONFIG_RESET:
    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function appState(state = false, action) {
  switch (action.type) {
    case _action_types.GeneralTypes.RECEIVED_APP_STATE:
      return action.data;

    default:
      return state;
  }
}

function credentials(state = {}, action) {
  switch (action.type) {
    case _action_types.GeneralTypes.RECEIVED_APP_CREDENTIALS:
      return Object.assign({}, state, action.data);

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function dataRetentionPolicy(state = {}, action) {
  switch (action.type) {
    case _action_types.GeneralTypes.RECEIVED_DATA_RETENTION_POLICY:
      return action.data;

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function deviceToken(state = '', action) {
  switch (action.type) {
    case _action_types.GeneralTypes.RECEIVED_APP_DEVICE_TOKEN:
      return action.data;

    default:
      return state;
  }
}

function license(state = {}, action) {
  switch (action.type) {
    case _action_types.GeneralTypes.CLIENT_LICENSE_RECEIVED:
      return action.data;

    case _action_types.GeneralTypes.CLIENT_LICENSE_RESET:
    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return {};

    default:
      return state;
  }
}

function timezones(state = [], action) {
  switch (action.type) {
    case _action_types.GeneralTypes.SUPPORTED_TIMEZONES_RECEIVED:
      return action.data;

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return [];

    default:
      return state;
  }
}

function serverVersion(state = '', action) {
  switch (action.type) {
    case _action_types.GeneralTypes.RECEIVED_SERVER_VERSION:
      return action.data;

    case _action_types.UserTypes.LOGOUT_SUCCESS:
      return '';

    default:
      return state;
  }
}

var _default = (0, _redux.combineReducers)({
  appState,
  credentials,
  config,
  dataRetentionPolicy,
  deviceToken,
  license,
  serverVersion,
  timezones
});

exports.default = _default;