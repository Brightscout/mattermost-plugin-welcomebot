"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = typing;

var _constants = require("../../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function typing(state
/*: Typing*/
= {}, action
/*: GenericAction*/
)
/*: Typing*/
{
  const {
    data,
    type
  } = action;

  switch (type) {
    case _constants.WebsocketEvents.TYPING:
      {
        const {
          id,
          userId,
          now
        } = data;

        if (id && userId) {
          return _objectSpread({}, state, {
            [id]: _objectSpread({}, state[id] || {}, {
              [userId]: now
            })
          });
        }

        return state;
      }

    case _constants.WebsocketEvents.STOP_TYPING:
      {
        const {
          id,
          userId,
          now
        } = data;

        if (state[id] && state[id][userId] <= now) {
          const nextState = _objectSpread({}, state, {
            [id]: _objectSpread({}, state[id])
          });

          Reflect.deleteProperty(nextState[id], userId);

          if (Object.keys(nextState[id]).length === 0) {
            Reflect.deleteProperty(nextState, id);
          }

          return nextState;
        }

        return state;
      }

    default:
      return state;
  }
}