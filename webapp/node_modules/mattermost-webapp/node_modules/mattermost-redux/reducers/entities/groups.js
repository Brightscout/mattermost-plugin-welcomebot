"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _action_types = require("../../action_types");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function syncables(state = {}, action) {
  switch (action.type) {
    case _action_types.GroupTypes.RECEIVED_GROUP_TEAMS:
      {
        return _objectSpread({}, state, {
          [action.group_id]: _objectSpread({}, state[action.group_id], {
            teams: action.data
          })
        });
      }

    case _action_types.GroupTypes.RECEIVED_GROUP_CHANNELS:
      {
        return _objectSpread({}, state, {
          [action.group_id]: _objectSpread({}, state[action.group_id], {
            channels: action.data
          })
        });
      }

    case _action_types.GroupTypes.LINKED_GROUP_TEAM:
      {
        let nextGroupTeams = [];

        if (!state[action.data.group_id] || !state[action.data.group_id].teams) {
          nextGroupTeams = [action.data];
        } else {
          nextGroupTeams = _objectSpread({}, state)[action.data.group_id].teams;

          for (let i = 0, len = nextGroupTeams.length; i < len; i++) {
            if (nextGroupTeams[i].team_id === action.data.team_id) {
              nextGroupTeams[i] = action.data;
            }
          }
        }

        return _objectSpread({}, state, {
          [action.data.group_id]: _objectSpread({}, state[action.data.group_id], {
            teams: nextGroupTeams
          })
        });
      }

    case _action_types.GroupTypes.LINKED_GROUP_CHANNEL:
      {
        let nextGroupChannels = [];

        if (!state[action.data.group_id] || !state[action.data.group_id].channels) {
          nextGroupChannels = [action.data];
        } else {
          nextGroupChannels = _objectSpread({}, state)[action.data.group_id].channels;

          for (let i = 0, len = nextGroupChannels.length; i < len; i++) {
            if (nextGroupChannels[i].channel_id === action.data.channel_id) {
              nextGroupChannels[i] = action.data;
            }
          }
        }

        return _objectSpread({}, state, {
          [action.data.group_id]: _objectSpread({}, state[action.data.group_id], {
            channels: nextGroupChannels
          })
        });
      }

    case _action_types.GroupTypes.UNLINKED_GROUP_TEAM:
      {
        if (!state[action.data.group_id]) {
          return state;
        }

        const nextTeams = state[action.data.group_id].teams.slice();
        const index = nextTeams.findIndex(groupTeam => {
          return groupTeam.team_id === action.data.syncable_id;
        });

        if (index !== -1) {
          nextTeams.splice(index, 1);
        }

        return _objectSpread({}, state, {
          [action.data.group_id]: _objectSpread({}, state[action.data.group_id], {
            teams: nextTeams
          })
        });
      }

    case _action_types.GroupTypes.UNLINKED_GROUP_CHANNEL:
      {
        if (!state[action.data.group_id]) {
          return state;
        }

        const nextChannels = state[action.data.group_id].channels.slice();
        const index = nextChannels.findIndex(groupChannel => {
          return groupChannel.channel_id === action.data.syncable_id;
        });

        if (index !== -1) {
          nextChannels.splice(index, 1);
        }

        return _objectSpread({}, state, {
          [action.data.group_id]: _objectSpread({}, state[action.data.group_id], {
            channels: nextChannels
          })
        });
      }

    default:
      return state;
  }
}

function members(state = {}, action) {
  switch (action.type) {
    case _action_types.GroupTypes.RECEIVED_GROUP_MEMBERS:
      {
        return _objectSpread({}, state, {
          [action.group_id]: {
            members: action.data.members,
            totalMemberCount: action.data.total_member_count
          }
        });
      }

    default:
      return state;
  }
}

function groups(state = {}, action) {
  switch (action.type) {
    case _action_types.GroupTypes.RECEIVED_GROUP:
      {
        return _objectSpread({}, state, {
          [action.data.id]: action.data
        });
      }

    case _action_types.GroupTypes.RECEIVED_GROUPS:
      {
        const nextState = _objectSpread({}, state);

        for (const group of action.data) {
          nextState[group.id] = group;
        }

        return nextState;
      }

    case _action_types.GroupTypes.RECEIVED_GROUPS_ASSOCIATED_TO_TEAM:
    case _action_types.GroupTypes.RECEIVED_GROUPS_ASSOCIATED_TO_CHANNEL:
      {
        const nextState = _objectSpread({}, state);

        for (const group of action.data.groups) {
          nextState[group.id] = group;
        }

        return nextState;
      }

    default:
      return state;
  }
}

var _default = (0, _redux.combineReducers)({
  syncables,
  members,
  groups
});

exports.default = _default;