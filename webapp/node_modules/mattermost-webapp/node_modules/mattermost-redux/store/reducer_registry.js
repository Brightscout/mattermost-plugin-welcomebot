"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ReducerRegistry = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// Based on http://nicolasgallagher.com/redux-modules-and-code-splitting/
class ReducerRegistry {
  constructor() {
    _defineProperty(this, "setReducers", reducers => {
      this.reducers = reducers;
    });

    _defineProperty(this, "getReducers", () => {
      return _objectSpread({}, this.reducers);
    });

    _defineProperty(this, "register", (name, reducer) => {
      this.reducers = _objectSpread({}, this.reducers, {
        [name]: reducer
      });

      if (this.emitChange) {
        this.emitChange(this.getReducers());
      }
    });

    _defineProperty(this, "setChangeListener", listener => {
      this.emitChange = listener;
    });

    this.emitChange = null;
    this.reducers = {};
  }

}

exports.ReducerRegistry = ReducerRegistry;
const reducerRegistry = new ReducerRegistry();
var _default = reducerRegistry;
exports.default = _default;