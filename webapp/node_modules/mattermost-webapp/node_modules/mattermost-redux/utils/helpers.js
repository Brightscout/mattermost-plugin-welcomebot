"use strict";

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.split");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoizeResult = memoizeResult;
exports.generateId = generateId;
exports.isEmail = isEmail;
exports.buildQueryString = buildQueryString;
exports.isMinimumServerVersion = exports.createShallowSelector = exports.createIdsSelector = void 0;

var _reselect = require("reselect");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function memoizeResult(func
/*: Function*/
)
/*: Function*/
{
  let lastArgs = null;
  let lastResult = null; // we reference arguments instead of spreading them for performance reasons

  return function shallowCompare() {
    if (!(0, _shallowEquals.default)(lastArgs, arguments)) {
      //eslint-disable-line prefer-rest-params
      // apply arguments instead of spreading for performance.
      const result = Reflect.apply(func, null, arguments); //eslint-disable-line prefer-rest-params

      if (!(0, _shallowEquals.default)(lastResult, result)) {
        lastResult = result;
      }
    }

    lastArgs = arguments; //eslint-disable-line prefer-rest-params

    return lastResult;
  };
} // Use this selector when you want a shallow comparison of the arguments and you want to memoize the result
// try and use this only when your selector returns an array of ids


const createIdsSelector = (0, _reselect.createSelectorCreator)(memoizeResult); // Use this selector when you want a shallow comparison of the arguments and you don't need to memoize the result

exports.createIdsSelector = createIdsSelector;
const createShallowSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _shallowEquals.default); // isMinimumServerVersion will return true if currentVersion is equal to higher or than the
// the provided minimum version. A non-equal major version will ignore minor and dot
// versions, and a non-equal minor version will ignore dot version.
// currentVersion is a string, e.g '4.6.0'
// minMajorVersion, minMinorVersion, minDotVersion are integers

exports.createShallowSelector = createShallowSelector;

const isMinimumServerVersion = (currentVersion
/*: string*/
, minMajorVersion
/*: number*/
= 0, minMinorVersion
/*: number*/
= 0, minDotVersion
/*: number*/
= 0) =>
/*: boolean*/
{
  if (!currentVersion || typeof currentVersion !== 'string') {
    return false;
  }

  const split = currentVersion.split('.');
  const major = parseInt(split[0], 10);
  const minor = parseInt(split[1] || '0', 10);
  const dot = parseInt(split[2] || '0', 10);

  if (major > minMajorVersion) {
    return true;
  }

  if (major < minMajorVersion) {
    return false;
  } // Major version is equal, check minor


  if (minor > minMinorVersion) {
    return true;
  }

  if (minor < minMinorVersion) {
    return false;
  } // Minor version is equal, check dot


  if (dot > minDotVersion) {
    return true;
  }

  if (dot < minDotVersion) {
    return false;
  } // Dot version is equal


  return true;
}; // Generates a RFC-4122 version 4 compliant globally unique identifier.


exports.isMinimumServerVersion = isMinimumServerVersion;

function generateId()
/*: string*/
{
  // implementation taken from http://stackoverflow.com/a/2117523
  var id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
  id = id.replace(/[xy]/g, c => {
    var r = Math.floor(Math.random() * 16);
    var v;

    if (c === 'x') {
      v = r;
    } else {
      v = r & 0x3 | 0x8;
    }

    return v.toString(16);
  });
  return id;
}

function isEmail(email
/*: string*/
)
/*: boolean*/
{
  // writing a regex to match all valid email addresses is really, really hard. (see http://stackoverflow.com/a/201378)
  // this regex ensures:
  // - at least one character that is not a space, comma, or @ symbol
  // - followed by a single @ symbol
  // - followed by at least one character that is not a space, comma, or @ symbol
  // this prevents <Outlook Style> outlook.style@domain.com addresses and multiple comma-separated addresses from being accepted
  return /^[^ ,@]+@[^ ,@]+$/.test(email);
}

function buildQueryString(parameters
/*: {}*/
)
/*: string*/
{
  const keys = Object.keys(parameters);

  if (keys.length === 0) {
    return '';
  }

  let query = '?';

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];
    query += key + '=' + encodeURIComponent(parameters[key]);

    if (i < keys.length - 1) {
      query += '&';
    }
  }

  return query;
}