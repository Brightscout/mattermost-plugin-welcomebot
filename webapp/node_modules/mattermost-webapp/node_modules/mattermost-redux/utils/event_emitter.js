"use strict";

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function isFunction(obj
/*: any*/
)
/*: boolean*/
{
  return typeof obj === 'function';
}

class EventEmitter {
  constructor() {
    _defineProperty(this, "listeners", void 0);

    this.listeners = new Map();
  }

  addListener(label
  /*: string*/
  , callback
  /*: Function*/
  )
  /*: void*/
  {
    if (!this.listeners.has(label)) {
      this.listeners.set(label, []);
    } // $FlowFixMe


    this.listeners.get(label).push(callback);
  }

  on(label
  /*: string*/
  , callback
  /*: Function*/
  )
  /*: void*/
  {
    this.addListener(label, callback);
  }

  removeListener(label
  /*: string*/
  , callback
  /*: Function*/
  )
  /*: boolean*/
  {
    const listeners = this.listeners.get(label);
    let index;

    if (listeners && listeners.length) {
      index = listeners.reduce((i, listener, idx) => {
        return isFunction(listener) && listener === callback ? idx : i;
      }, -1);

      if (index > -1) {
        listeners.splice(index, 1);
        this.listeners.set(label, listeners);
        return true;
      }
    }

    return false;
  }

  off(label
  /*: string*/
  , callback
  /*: Function*/
  )
  /*: void*/
  {
    this.removeListener(label, callback);
  }

  emit(label
  /*: string*/
  , ...args)
  /*: boolean*/
  {
    const listeners = this.listeners.get(label);

    if (listeners && listeners.length) {
      listeners.forEach(listener => {
        listener(...args);
      });
      return true;
    }

    return false;
  }

}

var _default = new EventEmitter();

exports.default = _default;