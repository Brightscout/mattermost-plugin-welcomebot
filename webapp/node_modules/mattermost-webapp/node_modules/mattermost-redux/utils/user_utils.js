"use strict";

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.split");

require("core-js/modules/es.string.starts-with");

require("core-js/modules/es.string.trim");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFullName = getFullName;
exports.displayUsername = displayUsername;
exports.rolesIncludePermission = rolesIncludePermission;
exports.isAdmin = isAdmin;
exports.isTeamAdmin = isTeamAdmin;
exports.isSystemAdmin = isSystemAdmin;
exports.isChannelAdmin = isChannelAdmin;
exports.hasUserAccessTokenRole = hasUserAccessTokenRole;
exports.hasPostAllRole = hasPostAllRole;
exports.hasPostAllPublicRole = hasPostAllPublicRole;
exports.profileListToMap = profileListToMap;
exports.removeUserFromList = removeUserFromList;
exports.getSuggestionsSplitBy = getSuggestionsSplitBy;
exports.getSuggestionsSplitByMultiple = getSuggestionsSplitByMultiple;
exports.filterProfilesMatchingTerm = filterProfilesMatchingTerm;
exports.sortByUsername = sortByUsername;

var _constants = require("../constants");

var _i18n_utils = require("./i18n_utils");

// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
// @flow
function getFullName(user
/*: UserProfile*/
)
/*: string*/
{
  if (user.first_name && user.last_name) {
    return user.first_name + ' ' + user.last_name;
  } else if (user.first_name) {
    return user.first_name;
  } else if (user.last_name) {
    return user.last_name;
  }

  return '';
}

function displayUsername(user
/*: UserProfile*/
, teammateNameDisplay
/*: string*/
, useFallbackUsername
/*: boolean*/
= true)
/*: string*/
{
  let name = useFallbackUsername ? (0, _i18n_utils.localizeMessage)('channel_loader.someone', 'Someone') : '';

  if (user) {
    if (teammateNameDisplay === _constants.Preferences.DISPLAY_PREFER_NICKNAME) {
      name = user.nickname || getFullName(user);
    } else if (teammateNameDisplay === _constants.Preferences.DISPLAY_PREFER_FULL_NAME) {
      name = getFullName(user);
    } else {
      name = user.username;
    }

    if (!name || name.trim().length === 0) {
      name = user.username;
    }
  }

  return name;
}

function rolesIncludePermission(roles
/*: string*/
, permission
/*: string*/
)
/*: boolean*/
{
  const rolesArray = roles.split(' ');
  return rolesArray.includes(permission);
}

function isAdmin(roles
/*: string*/
)
/*: boolean*/
{
  return isSystemAdmin(roles) || isTeamAdmin(roles);
}

function isTeamAdmin(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.TEAM_ADMIN_ROLE);
}

function isSystemAdmin(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.SYSTEM_ADMIN_ROLE);
}

function isChannelAdmin(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.CHANNEL_ADMIN_ROLE);
}

function hasUserAccessTokenRole(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.SYSTEM_USER_ACCESS_TOKEN_ROLE);
}

function hasPostAllRole(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.SYSTEM_POST_ALL_ROLE);
}

function hasPostAllPublicRole(roles
/*: string*/
)
/*: boolean*/
{
  return rolesIncludePermission(roles, _constants.General.SYSTEM_POST_ALL_PUBLIC_ROLE);
}

function profileListToMap(profileList
/*: Array<UserProfile>*/
)
/*: IDMappedObjects<UserProfile>*/
{
  const profiles = {};

  for (let i = 0; i < profileList.length; i++) {
    profiles[profileList[i].id] = profileList[i];
  }

  return profiles;
}

function removeUserFromList(userId
/*: $ID<UserProfile>*/
, list
/*: Array<UserProfile>*/
)
/*: Array<UserProfile>*/
{
  for (let i = list.length - 1; i >= 0; i--) {
    if (list[i].id === userId) {
      list.splice(i, 1);
      return list;
    }
  }

  return list;
} // Splits the term by a splitStr and composes a list of the parts of
// the split concatenated with the rest, forming a set of suggesitons
// matchable with startsWith
//
// E.g.: for "one.two.three" by "." it would yield
// ["one.two.three", ".two.three", "two.three", ".three", "three"]


function getSuggestionsSplitBy(term
/*: string*/
, splitStr
/*: string*/
)
/*: Array<string>*/
{
  const splitTerm = term.split(splitStr);
  const initialSuggestions = splitTerm.map((st, i) => splitTerm.slice(i).join(splitStr));
  let suggestions = [];

  if (splitStr === ' ') {
    suggestions = initialSuggestions;
  } else {
    suggestions = initialSuggestions.reduce((acc, val) => {
      if (acc.length === 0) {
        acc.push(val);
      } else {
        acc.push(splitStr + val, val);
      }

      return acc;
    }, []);
  }

  return suggestions;
}

function getSuggestionsSplitByMultiple(term
/*: string*/
, splitStrs
/*: Array<string>*/
)
/*: Array<string>*/
{
  const suggestions = splitStrs.reduce((acc, val) => {
    getSuggestionsSplitBy(term, val).forEach(suggestion => acc.add(suggestion));
    return acc;
  }, new Set());
  return [...suggestions];
}

function filterProfilesMatchingTerm(users
/*: Array<UserProfile>*/
, term
/*: string*/
)
/*: Array<UserProfile>*/
{
  const lowercasedTerm = term.toLowerCase();
  let trimmedTerm = lowercasedTerm;

  if (trimmedTerm.startsWith('@')) {
    trimmedTerm = trimmedTerm.substr(1);
  }

  return users.filter((user
  /*: UserProfile*/
  ) => {
    if (!user) {
      return false;
    }

    const profileSuggestions = [];
    const usernameSuggestions = getSuggestionsSplitByMultiple((user.username || '').toLowerCase(), _constants.General.AUTOCOMPLETE_SPLIT_CHARACTERS);
    profileSuggestions.push(...usernameSuggestions);
    const first = (user.first_name || '').toLowerCase();
    const last = (user.last_name || '').toLowerCase();
    const full = first + ' ' + last;
    profileSuggestions.push(first, last, full);
    profileSuggestions.push((user.nickname || '').toLowerCase());
    const email = (user.email || '').toLowerCase();
    profileSuggestions.push(email);
    profileSuggestions.push((user.nickname || '').toLowerCase());
    const split = email.split('@');

    if (split.length > 1) {
      profileSuggestions.push(split[1]);
    }

    return profileSuggestions.filter(suggestion => suggestion !== '').some(suggestion => suggestion.startsWith(trimmedTerm));
  });
}

function sortByUsername(a
/*: UserProfile*/
, b
/*: UserProfile*/
)
/*: number*/
{
  const nameA = a.username;
  const nameB = b.username;
  return nameA.localeCompare(nameB);
}