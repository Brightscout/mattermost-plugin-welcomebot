import { ActionFunc, DispatchFunc, GetStateFunc, PlatformType } from "../types/actions";
import { Dictionary } from "../types/utilities";
export declare function init(platform: PlatformType, siteUrl: string | undefined | null, token: string | undefined | null, optionalWebSocket: any, additionalOptions?: any): (dispatch: DispatchFunc, getState: GetStateFunc) => Promise<unknown>;
export declare function close(shouldReconnect?: boolean): (dispatch: DispatchFunc) => Promise<void>;
export declare function doFirstConnect(now: number): (dispatch: DispatchFunc, getState: GetStateFunc) => Promise<{
    data: boolean;
}>;
export declare function doReconnect(now: number): (dispatch: DispatchFunc, getState: GetStateFunc) => Promise<{
    data: boolean;
}>;
export declare type WebsocketBroadcast = {
    omit_users: Dictionary<boolean>;
    user_id: string;
    channel_id: string;
    team_id: string;
};
export declare type WebSocketMessage = {
    event: string;
    data: any;
    broadcast: WebsocketBroadcast;
    seq: number;
};
export declare function handleUserTypingEvent(msg: WebSocketMessage): (dispatch: DispatchFunc, getState: GetStateFunc) => {
    data: boolean;
};
export declare function userTyping(channelId: string, parentPostId: string): ActionFunc;
export declare function removeNotVisibleUsers(): ActionFunc;
